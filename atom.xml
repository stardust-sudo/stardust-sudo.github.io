<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>stardust&#39;s blog</title>
  
  
  <link href="https://stardust-sudo.github.io/atom.xml" rel="self"/>
  
  <link href="https://stardust-sudo.github.io/"/>
  <updated>2022-04-13T12:56:49.167Z</updated>
  <id>https://stardust-sudo.github.io/</id>
  
  <author>
    <name>stardust</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日记20220413</title>
    <link href="https://stardust-sudo.github.io/2022/04/13/0b9cc296a7c2/"/>
    <id>https://stardust-sudo.github.io/2022/04/13/0b9cc296a7c2/</id>
    <published>2022-04-13T10:58:29.000Z</published>
    <updated>2022-04-13T12:56:49.167Z</updated>
    
    <content type="html"><![CDATA[<p>Typora的front matter有bug，写的内容太多了会有卡顿。</p><p>这几天在学习java的一些内容，感觉是在实实在在学东西，而读研所作的科研就都是画饼，是一些，没有意义的东西。如果能够遇到一个实实在在的读研方向，每天踏踏实实做研究，真的是很幸福的事情。如果有这种实实在在的方向，读博也是不错的。</p><p>回想自己的读研生涯，一开始做汽车异常检测，然后又要做联邦学习，写论文初稿的时候还加了区块链，后来还涉及了GNSS反欺骗，还需要添加数字孪生，并没有深入一个领域深挖。说实话，导师可能平时的心思都在管理公司，对于科研了解不多，在科研方面的引导有限。</p><p>学习技术可能还是需要碰代码，碰底层，公众号科研不可取。</p><p>今天本身想重新读《置身事内》，发现很多关于政府治理的读不懂，还是缺乏感性经验的缘故。</p><p>学习技术可能需要分成两个方向，一个是高大上，比如设计服务端架构，一个是贴近生活，比如写个小爬虫，爬爬数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Typora的front matter有bug，写的内容太多了会有卡顿。&lt;/p&gt;
&lt;p&gt;这几天在学习java的一些内容，感觉是在实实在在学东西，而读研所作的科研就都是画饼，是一些，没有意义的东西。如果能够遇到一个实实在在的读研方向，每天踏踏实实做研究，真的是很幸福的事情。如</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>日记20220412</title>
    <link href="https://stardust-sudo.github.io/2022/04/12/1425c35edba6/"/>
    <id>https://stardust-sudo.github.io/2022/04/12/1425c35edba6/</id>
    <published>2022-04-12T14:00:05.000Z</published>
    <updated>2022-04-12T14:25:03.574Z</updated>
    
    <content type="html"><![CDATA[<p>京东还是没有疏通供应链，货物的预计到达时间延后了。最近的物资还算充足，这几天抢菜团购用力过猛，家里的食物和日用品买了很多，冰箱都有点放不下了，需要缓和几天。</p><p>封闭在家，和老妈之间肯定会有一些冲突，无论是观念，还是单纯的情绪。起了念头，工作之后租出去单独住，会有一些房租的压力，用钱换自由。还没有最后下决心，再说吧。</p><p>无论是租房还是自住，装修都不太人性化，希望有一个适合的休息和工作环境，这些都需要钱。</p><p>上海这次封城，基层管理和危机处理，说实话都不尽如人意，我还是喜欢上海的，我看着很不舒服，希望上海能够汲取教训。</p><p>java语言的学习快要结束了，系统的学习查漏补缺。学习东西还是不能急功近利，要系统地慢慢学。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;京东还是没有疏通供应链，货物的预计到达时间延后了。最近的物资还算充足，这几天抢菜团购用力过猛，家里的食物和日用品买了很多，冰箱都有点放不下了，需要缓和几天。&lt;/p&gt;
&lt;p&gt;封闭在家，和老妈之间肯定会有一些冲突，无论是观念，还是单纯的情绪。起了念头，工作之后租出去单独住，会有</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>日记20220411</title>
    <link href="https://stardust-sudo.github.io/2022/04/11/4ed7ae8cfab3/"/>
    <id>https://stardust-sudo.github.io/2022/04/11/4ed7ae8cfab3/</id>
    <published>2022-04-11T13:45:58.000Z</published>
    <updated>2022-04-11T13:56:24.419Z</updated>
    
    <content type="html"><![CDATA[<p>浦西封城第十一天，物资紧张的问题得到了缓解，主要依靠社区团购，叮咚盒马也能捡漏一些日用品和食物，京东据说也恢复了运营。和其他同学朋友交流了一下，他们社区发了几批物资，整体上情况都不错。上海将要分为封控区、管控区和防范区进行管理，估计完全恢复还要一段时间。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;浦西封城第十一天，物资紧张的问题得到了缓解，主要依靠社区团购，叮咚盒马也能捡漏一些日用品和食物，京东据说也恢复了运营。和其他同学朋友交流了一下，他们社区发了几批物资，整体上情况都不错。上海将要分为封控区、管控区和防范区进行管理，估计完全恢复还要一段时间。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>日记20220408</title>
    <link href="https://stardust-sudo.github.io/2022/04/08/66f37bd3de7e/"/>
    <id>https://stardust-sudo.github.io/2022/04/08/66f37bd3de7e/</id>
    <published>2022-04-08T15:43:13.000Z</published>
    <updated>2022-04-08T15:51:46.970Z</updated>
    
    <content type="html"><![CDATA[<p>这几天封闭在家，每天5点40起来，6点叮咚美团抢菜，8点盒马抢菜，8点半叮咚抢菜，然后一天中间歇性捡漏，抢菜很难抢，零零碎碎地抢到一些。社区团购的东西不知道什么时候到，有的团购出问题，还退钱了。刚刚得知京东自营可以发货，马上去买了日用品和方便保存的食品，如果到不了，就退货吧。每天重复忙这些事情，学习的事情没法专心去做，无可奈何。封城情况下，供应链和基层管理很重要，希望日后政府能够汲取经验吧。想着明天开始不抢了，家里的储备还是可以应付一段时间。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这几天封闭在家，每天5点40起来，6点叮咚美团抢菜，8点盒马抢菜，8点半叮咚抢菜，然后一天中间歇性捡漏，抢菜很难抢，零零碎碎地抢到一些。社区团购的东西不知道什么时候到，有的团购出问题，还退钱了。刚刚得知京东自营可以发货，马上去买了日用品和方便保存的食品，如果到不了，就退货吧</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>日记20220407</title>
    <link href="https://stardust-sudo.github.io/2022/04/07/065fe70ff90f/"/>
    <id>https://stardust-sudo.github.io/2022/04/07/065fe70ff90f/</id>
    <published>2022-04-07T05:54:34.000Z</published>
    <updated>2022-04-07T05:54:50.327Z</updated>
    
    <content type="html"><![CDATA[<p>这几天城市封控，各种消极的信息在社交网络上恣意流淌，很少打开微博知乎。过去自己沉浸在论坛，希望和世界同步，这几天离开了微博知乎，感觉也没有什么戒断反应。人更自由了，不用被各种琐碎极端的事件和情绪绑架，有了更多精力关注自己的生活。</p><p>看到很多初中高中本科同学在朋友圈po出居家的生活，回想自己一路走来，很多过去的朋友变成了点赞之交，有的直接消失在了微信列表了，留下的只有那么几个人。</p><p>初中时候倒是挺快乐的一段时光，现在看来可能有点过于外向，年轻时候无忧无虑真是美好。高中时候，学习上不怎么样，可能这是情绪抑郁的来源，高考考得也不怎么样。可能这就是高考的作用，人可以认识到自己的局限性，这也没什么不好的，能够放弃好高骛远。大学的生活比较混乱，一开始觉得化工挺好的，后来觉得不行，然后准备CS，走了不少弯路，找了大学的CS专业教学大纲在那里学，囫囵吞枣地学习不少理论，实际的项目开发实践不多，我认为这是学生与学生之间主要的差距。后来跨专业考研，读研做的科研对实际工作作用不大，意识到学校与企业需求的脱节很重要。</p><p>在过去的十几年，学习一直贯穿在生活中，不知道这是不是社会的价值观使然，现在觉得多维发展还是很重要的，很多兴趣爱好不一定有什么功利的作用，但是可以成为一种精神寄托。</p><p>对接下来的生活有一些期望：离嘈杂的信息流远一些，能够学习一些东西，多读一些书，多看一些有质量的视频，能够接触一些阳光积极的人和内容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这几天城市封控，各种消极的信息在社交网络上恣意流淌，很少打开微博知乎。过去自己沉浸在论坛，希望和世界同步，这几天离开了微博知乎，感觉也没有什么戒断反应。人更自由了，不用被各种琐碎极端的事件和情绪绑架，有了更多精力关注自己的生活。&lt;/p&gt;
&lt;p&gt;看到很多初中高中本科同学在朋友</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java基础编程</title>
    <link href="https://stardust-sudo.github.io/2022/04/07/71b6a1745c0c/"/>
    <id>https://stardust-sudo.github.io/2022/04/07/71b6a1745c0c/</id>
    <published>2022-04-07T04:09:05.000Z</published>
    <updated>2022-04-07T04:34:01.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础编译运行"><a href="#基础编译运行" class="headerlink" title="基础编译运行"></a>基础编译运行</h1><p>编译java文件为class文件（字节码文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) E:\###&gt;javac HelloWorld.java</span><br></pre></td></tr></table></figure><p>运行字节码文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) E:\###&gt;java HellowWorld</span><br></pre></td></tr></table></figure><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>建立单元测试的JUnit包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入@Test</span></span><br><span class="line"><span class="comment">//直接右击testFunc即可测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JUnitTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFunc</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="从键盘输入"><a href="#从键盘输入" class="headerlink" title="从键盘输入"></a>从键盘输入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scanner.nextInt();</span><br></pre></td></tr></table></figure><h1 id="产生随机数"><a href="#产生随机数" class="headerlink" title="产生随机数"></a>产生随机数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span>)(Math.random() * <span class="number">90</span> + <span class="number">10</span>);</span><br><span class="line"><span class="comment">//Math.random: [0,1)-&gt;[0,90) + 10-&gt;[10,100)</span></span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h2 id="单行-x2F-多行注释"><a href="#单行-x2F-多行注释" class="headerlink" title="单行&#x2F;多行注释"></a>单行&#x2F;多行注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJava</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="comment">//单行注释</span></span><br><span class="line">       System.out.println(<span class="string">&quot;Hello world&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> somebody</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">文档注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJava</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javadoc生成文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) E:\code\day01&gt;javadoc -d myHello -author -version -encoding UTF-8 -charset UTF-8 HelloJava.java</span><br></pre></td></tr></table></figure><p>-d 表示输出目录（directory），目录名myHello</p><p>-author 包含 @author 段</p><p>-version  包含 @version 段</p><h1 id="名称命名规则"><a href="#名称命名规则" class="headerlink" title="名称命名规则"></a>名称命名规则</h1><ul><li>包名：xxxyyyzzz</li><li>类名、接口名：XxxYxxZzz</li><li>变量名、方法名：xxxYyyZzz</li><li>常量名：XXX_YYY_ZZZ</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>byte</td><td>1字节&#x3D;8bit位</td><td>-128~127</td></tr><tr><td>short</td><td>2字节</td><td>-2^15^~2^15^-1</td></tr><tr><td>int</td><td>4字节</td><td>-2^31^~2^31^-1（约21亿）</td></tr><tr><td>long</td><td>8字节</td><td>-2^63^~2^63^</td></tr></tbody></table><p>常用int</p><p>使用long需要在数字后加上L或l</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">12345L</span>;</span><br></pre></td></tr></table></figure><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th><th>精度</th></tr></thead><tbody><tr><td>单精度float</td><td>4字节</td><td>-3.403E38~3.403E38</td><td>精确到7位有效数字</td></tr><tr><td>双精度double</td><td>8字节</td><td>-1.798E308~1.798E308</td><td>精确到14位有效数字</td></tr></tbody></table><p>java浮点型常量默认为double</p><p>声明float型变量，需要在数字后加f或者F</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1.23f</span>;</span><br></pre></td></tr></table></figure><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>char  1字符&#x3D;2字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="乱码和字符集"><a href="#乱码和字符集" class="headerlink" title="乱码和字符集"></a>乱码和字符集</h3><p>字符集是字符和数值之间的映射，不同字符集代表映射</p><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>boolean类型变量只能取true或false</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="类型自动提升"><a href="#类型自动提升" class="headerlink" title="类型自动提升"></a>类型自动提升</h3><p>容量<a href="%E5%AE%B9%E9%87%8F%E5%A4%A7%E5%B0%8F%E6%8C%87%E7%9A%84%E6%98%AF%E6%A0%87%E8%AF%86%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4%E5%A4%A7%E5%B0%8F%EF%BC%8Cfloat%E6%AF%94long%E5%AE%B9%E9%87%8F%E5%A4%A7">^1</a>小的数据类型变量和容量大的数据类型变量做运算，结果自动提升为容量大的类型</p><p>byte&#x2F;short&#x2F;char–&gt;int–&gt;long–&gt;float–&gt;double</p><p>特别地，byte&#x2F;short&#x2F;char互相之间做运算，结果为int类型</p><p>byte&#x2F;short&#x2F;char自己与自己做运算，结果也为int类型</p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1234.567</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)d;</span><br></pre></td></tr></table></figure><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><p>String类型变量可以与基本数据类型变量做连接运算（+）</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - * / % ++ -- </span><br></pre></td></tr></table></figure><p>整数之间使用&#x2F;表示整除</p><p>%表示取余，结果的符号与被模数一致</p><p>++a表示先运算后取值，a++表示先取值后运算</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">= += -= *= /= %=</span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">== != &lt; &gt; &lt;= &gt;= <span class="keyword">instanceof</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; | ! &amp;&amp; || ^</span><br></pre></td></tr></table></figure><p>&amp;逻辑与，&amp;&amp;短路与</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> &amp; (num++ &gt; <span class="number">0</span>);<span class="comment">//num++运行</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; (num++ &gt; <span class="number">0</span>);<span class="comment">//num++不运行</span></span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt; &gt;&gt; &gt;&gt;&gt; &amp; | ^ ~</span><br></pre></td></tr></table></figure><p>&gt;&gt;&gt;表示无符号右移，无论被移数最高位是0或1，补0</p><p>&gt;&gt;表示右移，被移数最高位为0，补0，被移数最高位为1，补1</p><p>异或^的应用：交换a和b的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(条件表达式)？表达式<span class="number">1</span>:表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">    执行代码块<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">    执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">         语句<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">         语句<span class="number">2</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">         语句<span class="number">3</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>对于switch结构，</p><ul><li>没有break的情况下，匹配了常量1之后，将执行语句1、语句2和语句3</li><li>表达式的类型为如下类型之一：byte&#x2F;short&#x2F;char&#x2F;int&#x2F;枚举类型&#x2F;String类型</li><li>case之后只能声明常量，不能声明范围</li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    执行语句;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    执行语句;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    执行语句;</span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组声明</span></span><br><span class="line"><span class="type">int</span>[] arr1;</span><br><span class="line"><span class="comment">//数组初始化</span></span><br><span class="line">arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>,<span class="number">1005</span>&#125;;</span><br><span class="line"><span class="comment">//调用数组元素</span></span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">1001</span>;</span><br><span class="line"><span class="comment">//数组长度</span></span><br><span class="line">arr1.length;</span><br><span class="line"><span class="comment">//遍历数组元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; arr1.length; i++)&#123;</span><br><span class="line">    System.out.println(arr1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组声明</span></span><br><span class="line"><span class="type">int</span>[][] arr2;</span><br><span class="line"><span class="comment">//二维数组初始化</span></span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][];</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][<span class="number">6</span>];</span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//调用二维数组元素</span></span><br><span class="line">arr2[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1001</span>;</span><br><span class="line"><span class="comment">//二维数组长度</span></span><br><span class="line">arr2.length;</span><br><span class="line">arr2[<span class="number">0</span>].length;</span><br><span class="line"><span class="comment">//遍历数组元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; arr2.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; arr2[i].length; j++)&#123;</span><br><span class="line">        System.out.println(arr1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>数组引用分配在栈中，数组分配在堆中</p></li><li><p>数组引用存储的是数组在堆中的首地址</p></li><li><p>二维数组引用指向堆中的数组，而堆中数组中的每一个元素指向一个数组</p><h2 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">Arrays.equals(a,b);</span><br><span class="line">Arrays.toString(a);</span><br><span class="line">Arrays.fill(a,<span class="number">0</span>);</span><br><span class="line">Arrays.sort(a);</span><br><span class="line">Arrays.binarySearch(a,<span class="number">2</span>);<span class="comment">//二分查找的前提是有序</span></span><br></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>类与实例</p><p>类包含属性和方法</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><ul><li><p>在同一个类中，允许存在几个同名方法，只要他们的参数个数或者参数类型不同即可</p></li><li><p>与返回值无关，只关注参数列表（参数个数或者参数类型）</p></li><li><p>调用方法时，根据参数列表选择调用哪个方法</p></li></ul><h3 id="可变个数形参"><a href="#可变个数形参" class="headerlink" title="可变个数形参"></a>可变个数形参</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String ... strs)</span>&#123;</span><br><span class="line">    System.out.println(strs[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>);</span><br></pre></td></tr></table></figure><p>参数个数可以是0个、1个和多个</p><h3 id="方法参数的值传递机制"><a href="#方法参数的值传递机制" class="headerlink" title="方法参数的值传递机制"></a>方法参数的值传递机制</h3><ul><li>如果变量是基本数据类型，此时赋值实际数值</li><li>如果变量是引用数据类型，此时赋值对象在堆中的地址</li></ul><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><p> 在方法体内调用自己</p><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p>private&lt;缺省&lt;protected&lt;public</p><table><thead><tr><th>修饰符</th><th align="center">类内部</th><th align="center">同一个包</th><th align="center">不同包的子类</th><th align="center">同一个工程</th></tr></thead><tbody><tr><td>private</td><td align="center">✔</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>缺省</td><td align="center">✔</td><td align="center">✔</td><td align="center"></td><td align="center"></td></tr><tr><td>protected</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td><td align="center"></td></tr><tr><td>public</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td></tr></tbody></table><p>private&#x2F;缺省&#x2F;protected&#x2F;public修饰类成员（属性&#x2F;方法&#x2F;构造器&#x2F;内部类）</p><p>缺省&#x2F;public修饰类</p><ul><li>default类只能被同一个包内部的类访问</li><li>public类可以在任何地方被访问</li></ul><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Sample</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Sample</span><span class="params">(String n)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="this的使用"><a href="#this的使用" class="headerlink" title="this的使用"></a>this的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dream</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.dream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this调用构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        ...<span class="comment">//约50行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="package和import的使用"><a href="#package和import的使用" class="headerlink" title="package和import的使用"></a>package和import的使用</h2><ul><li><p>package声明在类和接口文件首行，表示属于某个包</p></li><li><p>import导入指定包下的类</p></li></ul><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subclass</span> <span class="keyword">extends</span> <span class="title class_">Sperclass</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类继承父类，获得父类的属性和方法</p><h3 id="方法的重写（override）"><a href="#方法的重写（override）" class="headerlink" title="方法的重写（override）"></a>方法的重写（override）</h3><p>子类覆盖父类的方法</p><p>重写规定：</p><ul><li>子类重写的方法和父类方法的方法名和形参列表一致</li><li>子类重写的方法的权限修饰符不小于父类方法的权限修饰符<ul><li>子类不能重写父类的private方法（父类方法调用private方法还是调用父类的方法，而不是子类里相同方法名和形参列表的方法）</li></ul></li><li>返回值类型：<ul><li>父类方法返回值是void，子类重写方法返回值仍旧是void</li><li>父类方法返回值是A类型，子类重写方法的返回值是A类或者A类的子类</li><li>父类方法返回值是基本数据类型，子类重写方法的返回值是相同的基本数据类型</li></ul></li><li>子类重写的方法抛出的异常类型不大于父类方法抛出的异常类型（子类重写的方法抛出的异常类型是父类方法抛出的异常类型的子类）</li><li>子类和父类的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写）</li></ul><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><ul><li>可以调用父类的属性、方法和构造器</li><li>子类和父类出现了同名的属性，父类的属性使用super调用</li><li>子类重写了父类的方法，想在子类调用父类被重写的方法，使用super关键字</li><li>super(形参列表)调用父类构造器</li></ul><h3 id="子类对象实例化过程"><a href="#子类对象实例化过程" class="headerlink" title="子类对象实例化过程"></a>子类对象实例化过程</h3><p>先调用父类构造器，再调用子类构造器，但是自始至终只创建过一个对象，即子类对象</p><h2 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h2><ul><li><p>父类的引用指向子类的对象</p></li><li><p>虚拟方法调用：父类引用调用子父类同名同参数的方法，实际执行的是子类重写的方法</p></li><li><p>父类的引用指向子类的对象，父类引用不能调用子类中有而父类中没有的方法，也不能调用子类中有而父类中没有的属性</p></li><li><p>父类的引用指向子类的对象，在编译期只能调用父类中声明的方法，但在运行期执行的是子类重写的方法</p></li><li><p>对象的多态性只适用于方法，不适用于属性。父类引用指向子类对象，子父类有同名属性，父类引用调用父类属性</p></li><li><p>重载在编译器就确定调用什么方法，重写在运行期才确定调用什么方法</p></li></ul><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>父类引用指向子类对象，如果想要调用子类特有的属性和方法，需要向下转型，使用强制类型转化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) person;<span class="comment">//Student是Person的子类</span></span><br></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><ul><li>a instanceof A判断对象a是否为类A的对象</li><li>使用强制类型转换的时候，可能出现ClassCastException异常，需要在向下转型之前使用instanceof进行判断</li><li>a instanceof A&#x3D;&#x3D;&gt;a instanceof A的父类</li></ul><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h3 id="x3D-x3D-运算符"><a href="#x3D-x3D-运算符" class="headerlink" title="&#x3D;&#x3D;运算符"></a>&#x3D;&#x3D;运算符</h3><ul><li>对于基本数据类型，比较保存的数据是否相同</li><li>对于引用数据类型，比较保存的地址值是否相同，即两个引用是否指向同一个对象</li></ul><h3 id="equals-使用"><a href="#equals-使用" class="headerlink" title="equals()使用"></a>equals()使用</h3><p>对象比较需要重写equals方法</p><h3 id="toString-使用"><a href="#toString-使用" class="headerlink" title="toString()使用"></a>toString()使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(person);</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">System.out.println(person.toString());</span><br></pre></td></tr></table></figure><p>需要重写toString方法</p><h2 id="包装类（Wrapper）的使用"><a href="#包装类（Wrapper）的使用" class="headerlink" title="包装类（Wrapper）的使用"></a>包装类（Wrapper）的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本数据类型转换为包装类</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">12345</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;12345&quot;</span>);</span><br><span class="line"><span class="comment">//包装类类型转换为基本数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intNum</span> <span class="operator">=</span> integer.intValue();</span><br><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intNum</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="type">int</span> num;</span><br><span class="line"><span class="comment">//自动拆箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intNum1</span> <span class="operator">=</span> integer;</span><br><span class="line"><span class="comment">//基本数据类型、包装类转换为String类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intNum</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> intNum +<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">Float</span> <span class="variable">float</span> <span class="operator">=</span> <span class="number">12.3f</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> String.valueof(<span class="type">float</span>);<span class="comment">//&quot;12.3&quot;</span></span><br><span class="line"><span class="comment">//String类型转换为基本数据类型、包装类</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;123&quot;</span>); </span><br></pre></td></tr></table></figure><p>注：Integer类存在IntegerCache结构，缓存-128~127的Integer对象，用户使用自动装箱，引用指向IntegerCache缓存的Integer对象 </p><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><p>使用static修饰属性， 静态变量，多个对象共享同一个属性，即类变量，静态变量在内存中只会存在一份，存储在方法区的静态域中 </p><p>使用static修饰方法，静态方法，在静态方法中可以调用静态属性方法，在非静态方法中可以调用静态和非静态属性方法，不可以使用this&#x2F;super</p><h2 id="main-方法"><a href="#main-方法" class="headerlink" title="main()方法"></a>main()方法</h2><ul><li><p>程序的入口</p></li><li><p>静态方法</p></li><li><p>main(String[] args)其中String[] args形参也可以作为我们与控制台交互的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">System.out.println(args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;javac MainDemo.java</span><br><span class="line">&gt;java MainDemo abc def ghi</span><br><span class="line">abc</span><br><span class="line">def</span><br><span class="line">ghi</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul><li>作用：用来初始化类、对象</li><li>只能用static修饰或者不修饰，即静态代码块和非静态代码块</li><li>静态代码块：随着类的加载而执行；只执行一次；可以在加载类时初始化类的信息；如果有多个静态代码块，按照声明先后顺序执行；静态代码块优先于代码块执行</li><li>非静态代码块：随着对象的创建而执行；每创建一个对象，就执行一次；可以在创建对象时初始化对象属性；如果有多个非静态代码块，按照声明先后顺序执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先加载父类再加载子类，即先执行父类静态代码块再执行子类静态代码块，然后先调用父类代码块构造器再调用子类代码块构造器</li></ul><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><ul><li>final修饰类， 那么这个类不能被继承</li><li>final修饰方法，那么这个方法不能被重写</li><li>final修饰属性，可以视作常量（名字大写）</li><li>final修饰局部变量，可以视作常量（名字大写）</li></ul><h2 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h2><p>abstract修饰类，抽象类</p><ul><li>此类不能实例化</li><li>抽象类仍有构造器，便于子类实例化调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Klass</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>abstract修饰方法，抽象方法</p><ul><li>抽象方法只有方法声明，没有方法体</li><li>包含抽象方法的类一定是抽象类，而抽象类中可以没有抽象方法</li><li>若子类重写了父类中所有抽象方法后，此子类方可实例化</li><li>若子类没有重写父类中所有抽象方法后，则此子类为抽象类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>abstract不能修饰属性和构造器</li><li>abstract不能修饰private方法、静态方法和final修饰方法</li></ul><p>创建抽象类的匿名子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>使用interface定义接口</li><li>接口和类是并列的两个结构</li><li>如何定义接口：定义接口中的成员<ul><li>JDK7及以前：只能定义全局常量和抽象方法<ul><li>全局常量：public static final，书写时可以省略</li><li>抽象方法：public abstract</li></ul></li><li>JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法和默认方法<ul><li>接口中定义的静态方法，只能通过接口来调用</li><li>使用实现类的对象可以调用默认default方法</li><li>如果实现类重写了默认方法，那么调用时调用重写的方法</li><li>如果实现类继承的父类和实现的接口中声明了同名同参数的方法，那么子类在没有重写的情况下，默认调用父类中同名同参数方法，类优先</li><li>如果实现类实现了多个接口，多个接口定义了同名同参数的默认方法，那么在实现类没有重写此方法的时候报错，发生接口冲突</li><li>如何在实现类的方法中调用父类和接口中被重写的方法<ul><li>super.method()</li><li>接口.super.method()</li></ul></li></ul></li></ul></li><li>接口中不能定义构造器</li><li>类implements接口</li><li>类可以实现多个接口</li><li>格式：class A extends B implements C,D</li><li>接口与接口之间可以多继承interface A extends B,C </li><li>接口体现多态性，接口引用指向实现类</li><li>接口实际上可以看作一种规范</li><li>驱动即接口规范的实现类</li></ul><p>创建接口的匿名实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collections.sort(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(), <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li>类A声明在类B内，则类A是内部类，类B是外部类</li><li>内部类的分类：成员内部类（静态和非静态  ）&#x2F;局部内部类（方法内、代码块内和构造器内）</li></ul><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ul><li><strong>Error</strong>：JVM无法解决的问题，比如StackOverflowError和OOM（Out Of Memory，内存耗尽）</li><li><strong>Exception</strong>：因编程错误或者偶然因素导致的问题，比如空指针访问和数组角标越界</li><li>编译期异常：编译的时候就会报出来的异常；运行期异常：运行的时候才会报出来的异常</li></ul><h2 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h2><ul><li>抛异常：一旦出现异常，就抛出异常，后续代码不执行</li><li>抓异常：try-catch-finally &#x2F; throws</li></ul><h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 变量名<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 变量名<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//一定会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>finally中声明的代码一定会执行，即使try中有return，catch中有异常和return</li><li>数据库连接、输入输出流和网络编程Socket等资源，JVM不能自动回收，需要手动释放，适合写在finally</li></ul><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> method <span class="keyword">throws</span> XxxException&#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;提示信息&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户自定义异常类"><a href="#用户自定义异常类" class="headerlink" title="用户自定义异常类"></a>用户自定义异常类</h2><ul><li>继承于现有的异常结构：RuntimeException和Exception</li><li>提供全局常量：serialVersionUID</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">70348971939L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础编译运行&quot;&gt;&lt;a href=&quot;#基础编译运行&quot; class=&quot;headerlink&quot; title=&quot;基础编译运行&quot;&gt;&lt;/a&gt;基础编译运行&lt;/h1&gt;&lt;p&gt;编译java文件为class文件（字节码文件）&lt;/p&gt;
&lt;figure class=&quot;highlight p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>win命令行指令</title>
    <link href="https://stardust-sudo.github.io/2022/04/06/59782945df67/"/>
    <id>https://stardust-sudo.github.io/2022/04/06/59782945df67/</id>
    <published>2022-04-06T08:58:04.000Z</published>
    <updated>2022-04-07T04:32:55.545Z</updated>
    
    <content type="html"><![CDATA[<p>上下键可调出最近使用的命令</p><p>转到D盘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) C:\Users\boneScription&gt;d:</span><br></pre></td></tr></table></figure><p>查看D盘下文件目录（dir-directory-目录）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) D:\&gt;dir</span><br><span class="line"> 驱动器 D 中的卷是 Data</span><br><span class="line"> 卷的序列号是 8E70-B4EE</span><br><span class="line"></span><br><span class="line"> D:\ 的目录</span><br><span class="line"></span><br><span class="line">2022/03/19  21:39    &lt;DIR&gt;          7SUCLOUD</span><br><span class="line">2021/05/19  07:57    &lt;DIR&gt;          apache-maven-3.6.3</span><br><span class="line">2022/03/18  06:18    &lt;DIR&gt;          BaiduNetdiskDownload</span><br><span class="line">2021/03/28  18:23    &lt;DIR&gt;          comma2k19</span><br><span class="line">......</span><br><span class="line">               1 个文件  4,446,390,272 字节</span><br><span class="line">              19 个目录 285,296,730,112 可用字节</span><br></pre></td></tr></table></figure><p>创建名叫java的文件夹（md-make directory）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) D:\&gt;md java</span><br></pre></td></tr></table></figure><p>进入java文件夹（cd-change directory）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) D:\&gt;cd java</span><br><span class="line">(base) D:\&gt;cd d:\java</span><br></pre></td></tr></table></figure><p>退出文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1\team1&gt;cd..</span><br></pre></td></tr></table></figure><p>回到D盘符下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1\team1&gt;cd\</span><br><span class="line"></span><br><span class="line">(base) d:\&gt;</span><br></pre></td></tr></table></figure><p>创建md文件，并且输入内容（\br表示回车）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1\team1&gt;echo #head\br&gt;1.md</span><br></pre></td></tr></table></figure><p>删除文件（del-delete）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1\team1&gt;del 1.md</span><br></pre></td></tr></table></figure><p>删除以.txt结尾的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1\team1&gt;del  *.txt</span><br></pre></td></tr></table></figure><p>删除空的文件夹（rd-remove directory）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1&gt;rd team2</span><br></pre></td></tr></table></figure><p>删除非空的文件夹</p><ol><li>del 文件夹中的文件</li><li>rd 文件夹</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1&gt;del team1</span><br><span class="line">d:\java\class1\team1\*, 是否确认(Y/N)? y</span><br><span class="line"></span><br><span class="line">(base) d:\java\class1&gt;rd team1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上下键可调出最近使用的命令&lt;/p&gt;
&lt;p&gt;转到D盘&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown常用语法</title>
    <link href="https://stardust-sudo.github.io/2022/04/06/b5a553aa6c84/"/>
    <id>https://stardust-sudo.github.io/2022/04/06/b5a553aa6c84/</id>
    <published>2022-04-06T08:57:08.000Z</published>
    <updated>2022-04-07T04:33:16.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>#一级标题</p><p>##二级标题</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>&gt;引用</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>-列项1</p><p>-列项2</p><p>-列项3</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>1.列项1</p><p>2.列项2</p><p>3.列项3</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>`&#96;&#96;java 回车</p><h3 id="内连代码"><a href="#内连代码" class="headerlink" title="内连代码"></a>内连代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`System.out.println()` </span><br></pre></td></tr></table></figure><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><h3 id="公式块"><a href="#公式块" class="headerlink" title="公式块"></a>公式块</h3><p>$$ 回车</p><p>数学公式使用latex输入</p><h3 id="内连公式"><a href="#内连公式" class="headerlink" title="内连公式"></a>内连公式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$latex$</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>|列名1|列名2| 回车</p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java[^脚注]</span><br><span class="line">[^脚注]: 一种编程语言</span><br></pre></td></tr></table></figure><h2 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h2><p>— 回车</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[toc] 回车</p><p>toc：table of content</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="内联链接"><a href="#内联链接" class="headerlink" title="内联链接"></a>内联链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[bing搜索]([www.bing.com](http://www.bing.com/) “必应&quot;)</span><br></pre></td></tr></table></figure><p>鼠标悬停在bing搜索上会显示必应</p><h3 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[内部链接](#标题-1)</span><br></pre></td></tr></table></figure><p>点击内部链接跳转到标题 1</p><h3 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[bing链接][bing]</span><br><span class="line">[bing]: www.bing.com</span><br></pre></td></tr></table></figure><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;www.bing.com&gt;</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](/path/to/img.jpg)</span><br></pre></td></tr></table></figure><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br></pre></td></tr></table></figure><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**加粗**</span><br></pre></td></tr></table></figure><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><h2 id="和-需要加-转义"><a href="#和-需要加-转义" class="headerlink" title="*和_需要加\转义"></a>*和_需要加\转义</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;p&gt;#一级标题&lt;/p&gt;
&lt;p&gt;##二级标题&lt;/p&gt;
&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>debug</title>
    <link href="https://stardust-sudo.github.io/2022/04/06/15e9b9396bcb/"/>
    <id>https://stardust-sudo.github.io/2022/04/06/15e9b9396bcb/</id>
    <published>2022-04-06T08:56:05.000Z</published>
    <updated>2022-04-07T04:32:29.572Z</updated>
    
    <content type="html"><![CDATA[<ol><li>System.out.println()</li><li>打断点调试<ul><li>step over：跳过代码</li><li>step into：进入方法</li><li>step return：离开方法返回</li><li>resume：执行到下一个断点或者直接结束</li><li>drop to frame：跳到方法首行</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;System.out.println()&lt;/li&gt;
&lt;li&gt;打断点调试&lt;ul&gt;
&lt;li&gt;step over：跳过代码&lt;/li&gt;
&lt;li&gt;step into：进入方法&lt;/li&gt;
&lt;li&gt;step return：离开方法返回&lt;/li&gt;
&lt;li&gt;resume：执行到下</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Eclipse快捷键</title>
    <link href="https://stardust-sudo.github.io/2022/04/06/54ba3909c8c4/"/>
    <id>https://stardust-sudo.github.io/2022/04/06/54ba3909c8c4/</id>
    <published>2022-04-05T16:00:00.000Z</published>
    <updated>2022-04-06T14:03:47.241Z</updated>
    
    <content type="html"><![CDATA[<p>Eclipse中的快捷键：</p><ol><li><p>补全代码的声明：alt + &#x2F;</p></li><li><p>快速修复: ctrl + 1  </p></li><li><p>批量导包：ctrl + shift + o</p></li><li><p>使用单行注释：ctrl + &#x2F;</p></li><li><p>使用多行注释： ctrl + shift + &#x2F;   </p></li><li><p>取消多行注释：ctrl + shift + \</p></li><li><p>复制指定行的代码：ctrl + alt + down 或 ctrl + alt + up</p></li><li><p>删除指定行的代码：ctrl + d</p></li><li><p>上下移动代码：alt + up  或 alt + down</p></li><li><p>切换到下一行代码空位：shift + enter</p></li><li><p>切换到上一行代码空位：ctrl + shift + enter</p></li><li><p>如何查看源码：ctrl + 选中指定的结构   或  ctrl + shift + t</p></li><li><p>退回到前一个编辑的页面：alt + left </p></li><li><p>进入到下一个编辑的页面(针对于上面那条来说的)：alt + right</p></li><li><p>光标选中指定的类，查看继承树结构：ctrl + t</p></li><li><p>复制代码： ctrl + c</p></li><li><p>撤销： ctrl + z</p></li><li><p>反撤销： ctrl + y</p></li><li><p>剪切：ctrl + x </p></li><li><p>粘贴：ctrl + v</p></li><li><p>保存： ctrl + s</p></li><li><p>全选：ctrl + a</p></li><li><p>格式化代码： ctrl + shift + f</p></li><li><p>选中数行，整体往后移动：tab</p></li><li><p>选中数行，整体往前移动：shift + tab</p></li><li><p>在当前类中，显示类结构，并支持搜索指定的方法、属性等：ctrl + o</p></li><li><p>批量修改指定的变量名、方法名、类名等：alt + shift + r</p></li><li><p>选中的结构的大小写的切换：变成大写： ctrl + shift + x</p></li><li><p>选中的结构的大小写的切换：变成小写：ctrl + shift + y</p></li><li><p>调出生成getter&#x2F;setter&#x2F;构造器等结构： alt + shift + s</p></li><li><p>显示当前选择资源(工程 or 文件)的属性：alt + enter</p></li><li><p>快速查找：参照选中的Word快速定位到下一个 ：ctrl + k</p></li><li><p>关闭当前窗口：ctrl + w</p></li><li><p>关闭所有的窗口：ctrl + shift + w</p></li><li><p>查看指定的结构使用过的地方：ctrl + alt + g</p></li><li><p>查找与替换：ctrl + f</p></li><li><p>最大化当前的View：ctrl + m</p></li><li><p>直接定位到当前行的首位：home</p></li><li><p>直接定位到当前行的末位：end</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Eclipse中的快捷键：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;补全代码的声明：alt + &amp;#x2F;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;快速修复: ctrl + 1  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;批量导包：ctrl + shift + o&lt;/p&gt;
&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://stardust-sudo.github.io/2022/04/05/3e8297d6e1a6/"/>
    <id>https://stardust-sudo.github.io/2022/04/05/3e8297d6e1a6/</id>
    <published>2022-04-05T07:09:55.000Z</published>
    <updated>2022-04-08T07:45:22.241Z</updated>
    
    <content type="html"><![CDATA[<p>开启这个个人博客的原因有两个：</p><ul><li>平时学习笔记都放在本地，电脑不在身边，查找起来不方便，放在博客上，使用任何联网终端都可以访问</li><li>平时个人生活和所思所想，不太适合发在朋友圈里，放在个人博客上，作为自留地还算不错</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开启这个个人博客的原因有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平时学习笔记都放在本地，电脑不在身边，查找起来不方便，放在博客上，使用任何联网终端都可以访问&lt;/li&gt;
&lt;li&gt;平时个人生活和所思所想，不太适合发在朋友圈里，放在个人博客上，作为自留地还算不错&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
