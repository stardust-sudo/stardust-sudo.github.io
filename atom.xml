<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>stardust&#39;s blog</title>
  
  
  <link href="https://stardust-sudo.github.io/atom.xml" rel="self"/>
  
  <link href="https://stardust-sudo.github.io/"/>
  <updated>2022-04-28T00:54:07.996Z</updated>
  <id>https://stardust-sudo.github.io/</id>
  
  <author>
    <name>stardust</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>8-聚合函数 尚硅谷MySQL入门到高级-宋红康版笔记</title>
    <link href="https://stardust-sudo.github.io/2022/04/28/fa2bb197d6a6/"/>
    <id>https://stardust-sudo.github.io/2022/04/28/fa2bb197d6a6/</id>
    <published>2022-04-28T00:54:56.000Z</published>
    <updated>2022-04-28T00:54:07.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="聚合函数介绍"><a href="#聚合函数介绍" class="headerlink" title="聚合函数介绍"></a>聚合函数介绍</h1><p>作用于一组数据，并对一组数据返回一个值</p><h2 id="AVG-x2F-SUM"><a href="#AVG-x2F-SUM" class="headerlink" title="AVG&#x2F;SUM"></a>AVG&#x2F;SUM</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),<span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h2 id="MAX-x2F-MIN"><a href="#MAX-x2F-MIN" class="headerlink" title="MAX&#x2F;MIN"></a>MAX&#x2F;MIN</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary),<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h2 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h2><p>作用：计算指定字段在查询结果中出现的次数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(employee_id),<span class="built_in">COUNT</span>(<span class="number">2</span><span class="operator">*</span>salary),<span class="built_in">COUNT</span>(<span class="number">1</span>),<span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>计算指定字段出现个数时，不计算NULL值的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(commission_pct)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>使用COUNT(*)&#x2F;COUNT(1)&#x2F;COUNT(具体字段)统计数据表行数，哪个效率高？</p><ul><li>使用MyISAM引擎的话，统计数据表行数只需要O(1)时间复杂度，因为MyISAM的数据表维护的元数据meta里面包含了row_count值，三者效率相同</li><li>使用InnoDB引擎的话，三者效率：COUNT(*)&#x3D;COUNT(1)&gt;COUNT(具体字段)</li></ul><h1 id="GROUP-BY的使用"><a href="#GROUP-BY的使用" class="headerlink" title="GROUP BY的使用"></a>GROUP BY的使用</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查询各个部门的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> avg_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure><h2 id="使用多个列分组"><a href="#使用多个列分组" class="headerlink" title="使用多个列分组"></a>使用多个列分组</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查询各个depment_id,job_id的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> department_id, job_id, <span class="built_in">AVG</span>(salary) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id,job_id;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>SELECT中出现的非组函数的字段必须声明在GROUP BY中，反之，GROUP BY中声明的字段可以不出现在SELECT中</p></li><li><p>GROUP BY声明在FROM和WHERE后面，在ORDER BY和LIMIT前面</p></li><li><p>MySQL中GROUP BY中使用 WITH ROLLUP，所得结果多出一条对于整体情况的统计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> avg_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="HAVING的使用"><a href="#HAVING的使用" class="headerlink" title="HAVING的使用"></a>HAVING的使用</h1><ul><li><p>用来过滤数据</p></li><li><p>如果过滤条件中使用了聚合函数，则必须使用HAVING替换WHERE</p></li><li><p>HAVING必须声明在GROUP BY后面</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查询各个部门中最高工资比<span class="number">10000</span>高的部门信息</span><br><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary) <span class="keyword">AS</span> max_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> max_sal <span class="operator">&gt;</span> <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><ul><li>推荐使用方式一，方式一效率高于方式二</li><li>当过滤条件中有聚合函数，则此过滤条件必须声明在HAVING中</li><li>当过滤条件中没有聚合函数，则此过滤条件声明中WHERE和HAVING都可以，但是建议声明在WHERE中</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#查询部门id为部门<span class="number">10</span>，<span class="number">20</span>，<span class="number">30</span>，<span class="number">40</span>这四个部门中最高工资比<span class="number">10000</span>高的部门信息</span><br><span class="line">#方式一</span><br><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary) <span class="keyword">AS</span> max_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> max_sal <span class="operator">&gt;</span> <span class="number">10000</span>;</span><br><span class="line">#方式二</span><br><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary) <span class="keyword">AS</span> max_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> max_sal <span class="operator">&gt;</span> <span class="number">10000</span> <span class="keyword">AND</span> department_id <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><p>WHERE与HAVING的对比</p><ol><li>从适用范围上讲，HAVING比WHERE广</li><li>如果过滤条件中没有聚合函数，WHERE执行效率高于HAVING</li></ol><h1 id="SQL底层执行原理"><a href="#SQL底层执行原理" class="headerlink" title="SQL底层执行原理"></a>SQL底层执行原理</h1><h2 id="SELECT语句的完整结构"><a href="#SELECT语句的完整结构" class="headerlink" title="SELECT语句的完整结构"></a>SELECT语句的完整结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...,...,...(存在聚合函数)</span><br><span class="line"><span class="keyword">FROM</span> ... (<span class="keyword">LEFT</span><span class="operator">/</span><span class="keyword">RIGHT</span>) <span class="keyword">JOIN</span> ... (<span class="keyword">LEFT</span><span class="operator">/</span><span class="keyword">RIGHT</span>) <span class="keyword">JOIN</span> ...</span><br><span class="line"><span class="keyword">ON</span> 多表的连接条件</span><br><span class="line"><span class="keyword">WHERE</span> 过滤条件(不包含聚合函数)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...,...,...</span><br><span class="line"><span class="keyword">HAVING</span> 过滤条件(包含聚合函数)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ...,...,... (<span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span>)</span><br><span class="line">LIMIT ...,...</span><br></pre></td></tr></table></figure><h2 id="SQL执行过程"><a href="#SQL执行过程" class="headerlink" title="SQL执行过程"></a>SQL执行过程</h2><ol><li>FROM … JOIN … 进行CROSS JOIN 笛卡尔积</li><li>ON 多表连接条件</li><li>(LEFT&#x2F;RIGHT) JOIN</li><li>WHERE</li><li>GROUP BY</li><li>HAVING</li><li>SELECT</li><li>DISTINCT 去重</li><li>ORDER BY</li><li>LIMIT</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;聚合函数介绍&quot;&gt;&lt;a href=&quot;#聚合函数介绍&quot; class=&quot;headerlink&quot; title=&quot;聚合函数介绍&quot;&gt;&lt;/a&gt;聚合函数介绍&lt;/h1&gt;&lt;p&gt;作用于一组数据，并对一组数据返回一个值&lt;/p&gt;
&lt;h2 id=&quot;AVG-x2F-SUM&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>7-单行函数 尚硅谷MySQL入门到高级-宋红康版笔记</title>
    <link href="https://stardust-sudo.github.io/2022/04/27/a4c909adc5a2/"/>
    <id>https://stardust-sudo.github.io/2022/04/27/a4c909adc5a2/</id>
    <published>2022-04-27T10:37:45.000Z</published>
    <updated>2022-04-27T10:37:13.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h1><h2 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h2><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>SIGN(X)</td><td>返回X的符号，正数返回1，负数返回-1，0返回0</td></tr><tr><td>PI()</td><td>返回圆周率的值</td></tr><tr><td>CEIL(x)，CEILING(x)</td><td>返回大于等于某个值的最小整数</td></tr><tr><td>FLOOR(x)</td><td>返回小于等于某个值的最大整数</td></tr><tr><td>LEAST(e1,e2,e3,…)</td><td>返回列表中的最小值</td></tr><tr><td>GREATEST(e1,e2,e3,…)</td><td>返回列表中的最大值</td></tr><tr><td>MOD(x,y)</td><td>返回x除以y以后的余数</td></tr><tr><td>RAND()</td><td>返回0~1的随机值</td></tr><tr><td>RAND(x)</td><td>返回0~1的随机值，其中x的值作为种子值，相同的x值会产生相同的随机数</td></tr><tr><td>ROUND(x)</td><td>返回一个对x的值进行四舍五入后，最接近x的整数</td></tr><tr><td>ROUND(x,y)</td><td>返回一个对x的值进行四舍五入后，最接近x的值，并保留到小数点后y位</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数字x截断为y位小数的结果</td></tr><tr><td>SQRT(x)</td><td>返回x的平方根，当x的值为负数时，返回NULL</td></tr></tbody></table><h2 id="指数与对数"><a href="#指数与对数" class="headerlink" title="指数与对数"></a>指数与对数</h2><p>POW(x,y)&#x2F;POWER(x,y)&#x2F;EXP(x)&#x2F;LN(x)&#x2F;LOG(x)&#x2F;LOG10(x)&#x2F;LOG2(x)</p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>BIN(x) 二进制&#x2F;HEX(x) 十六进制&#x2F;OCT(x) 八进制&#x2F;CONV(x,f1,f2) 返回f1进制的数转换成f2进制的数</p><h1 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h1><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ASCII(s)</td><td>返回字符串s中第一个字符的ASCII码值</td></tr><tr><td>CHAR_LENGTH(s)</td><td>返回字符串s的字符数</td></tr><tr><td>LENGTH(s)</td><td>返回字符串s的字节数，和字符集相关</td></tr><tr><td>CONCAT(s1,s2,…,sn)</td><td>连接s1,s2,…,sn为一个字符串</td></tr><tr><td>CONCAT_WS(x,s1,s2,…,sn)</td><td>同CONCAT(s1,s2,…,sn)函数，但是字符串之间加上x</td></tr><tr><td>INSERT(str,idx,len,replacestr)</td><td>将字符串str从第idx位置开始，len个字符长的子串替换为replacestr，字符串的索引从1开始</td></tr><tr><td>REPLACE(str,a,b)</td><td>用字符串替换字符串str中所有出现的字符串a</td></tr><tr><td>UPPER(s)&#x2F;UCASE(s)</td><td>将字符串s的所有字母转换成大写字母</td></tr><tr><td>LOWER(s)&#x2F;LCASE(s)</td><td>将字符串s的所有字母转换成小写字母</td></tr><tr><td>LEFT(str,n)</td><td>返回字符串str最左边的n个字符</td></tr><tr><td>RIGHT(str,n)</td><td>返回字符串str最右边的n个字符</td></tr><tr><td>LPAD(str,len,pad)</td><td>用字符串pad对str最左边进行填充，直到str的长度为len个字符，实现右对齐效果</td></tr><tr><td>RPAD(str,len,pad)</td><td>用字符串pad对str最右边进行填充，直到str的长度为len个字符，实现左对齐效果</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串s左侧的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串s右侧的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串开始与结尾的空格</td></tr><tr><td>TRIM(s1 FROM s)</td><td>去掉字符串开始与结尾的s1</td></tr><tr><td>TRIM(LEADING s1 FROM s)</td><td>去掉字符串开始处的s1</td></tr><tr><td>TRIM(TRAILING s1 FROM s)</td><td>去掉字符串结尾处的s1</td></tr><tr><td>REPEAT(str,n)</td><td>返回str重复n次的结果</td></tr><tr><td>SPACE(n)</td><td>返回n个空格</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串s1,s2的ASCII码值的大小</td></tr><tr><td>SUBSTR(s,ind,len)</td><td>返回字符串s从ind位置开始的len个字符</td></tr><tr><td>LOCATE(substr,str)</td><td>返回字符串substr在字符串str中首次出现的位置，未找到，返回0</td></tr><tr><td>ELT(m,s1,s2,..,sn)</td><td>返回指定位置的字符串，比如m&#x3D;3，返回s3</td></tr><tr><td>FIELD(s,s1,s2,…,sn)</td><td>返回字符串s在字符串列表中第一次出现的位置</td></tr><tr><td>FIND_IN_SET(s1,s2)</td><td>返回字符串s1在字符串s2中首次出现的位置，其中，字符串s2是一个以逗号分隔的字符串，比如select find_in_set(‘aa’,’bb,aa,ccc’)返回2</td></tr><tr><td>REVERSE(s)</td><td>返回s反转后的字符串</td></tr><tr><td>NULLIF(value1,value2)</td><td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</td></tr></tbody></table><h1 id="日期时间类型函数"><a href="#日期时间类型函数" class="headerlink" title="日期时间类型函数"></a>日期时间类型函数</h1><h2 id="获取日期、时间"><a href="#获取日期、时间" class="headerlink" title="获取日期、时间"></a>获取日期、时间</h2><p>CURDATE() 返回当前日期，只包含年月日</p><p>CURTIME()返回当前时间，只包含时分秒</p><p>NOW()返回当前系统日期和时间</p><h2 id="日期与时间戳的转换"><a href="#日期与时间戳的转换" class="headerlink" title="日期与时间戳的转换"></a>日期与时间戳的转换</h2><p>UNIX_TIMESTAMP()以UNIX时间戳的形式返回当前时间，SELECT UNIX_TIMESTAMP()返回1651052982</p><p>UNIX_TIMESTAMP(date)将时间date以UNIX时间戳的形式返回，SELECT UNIX_TIMESTAMP(‘2022-05-01 12:00:00’)返回1651377600</p><p>FROM_UNIXTIME(timestamp)将时间戳的时间转换为普通格式的时间</p><h1 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h1><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>IF(value,value1,value2)</td><td>如果value为TRUE，返回value1，否则返回value2</td></tr><tr><td>IFNULL(value1,value2)</td><td>如果value1不为NULL，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 … [ELSE 结果n] END</td><td>if … else if … else …</td></tr><tr><td>CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值2 THEN 值2 … [ELSE 值n] END</td><td>switch … case …</td></tr></tbody></table><h2 id="加密与解密函数"><a href="#加密与解密函数" class="headerlink" title="加密与解密函数"></a>加密与解密函数</h2><p>PASSWORD(str)&#x2F;MD5(str)&#x2F;SHA(str)</p><p>ENCODE(value,password_seed)&#x2F;DECODE(value,password_seed)</p><h2 id="MySQL信息函数"><a href="#MySQL信息函数" class="headerlink" title="MySQL信息函数"></a>MySQL信息函数</h2><p>VERSION()&#x2F;CONNECTION_ID()&#x2F;DATABASE()&#x2F;USER()&#x2F;CHARSET(value)&#x2F;COLLATION(value)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数值函数&quot;&gt;&lt;a href=&quot;#数值函数&quot; class=&quot;headerlink&quot; title=&quot;数值函数&quot;&gt;&lt;/a&gt;数值函数&lt;/h1&gt;&lt;h2 id=&quot;基本函数&quot;&gt;&lt;a href=&quot;#基本函数&quot; class=&quot;headerlink&quot; title=&quot;基本函数&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>化工专业本科回忆帖</title>
    <link href="https://stardust-sudo.github.io/2022/04/24/f3dc87f0dde6/"/>
    <id>https://stardust-sudo.github.io/2022/04/24/f3dc87f0dde6/</id>
    <published>2022-04-24T13:28:07.000Z</published>
    <updated>2022-04-24T13:28:10.259Z</updated>
    
    <content type="html"><![CDATA[<p>本科就读于化工专业很强势的学校，信息学院的院士也是搞化工的哈哈。我按照时间的顺序叙述，由于毕业两三年了，记忆可能有一些小差错。</p><p>大一的时候，就是各种基础课，高数线代等等，还有C语言这些课，工科该有的基础课都有。</p><p>大二的时候，开始上四大化学了，比较喜欢物理化学，有机学得不好，无机化学无感，分析化学挺头痛的。这时候各种实验课也出现了，基本上每一门化学课都对应有实验课，大学物理也有实验课，实验楼都在比较远的地方，所以上实验课需要跑很远。实验课课上操作还好，主要头疼的是预习报告和实验报告，都没什么太大意义，就是大段大段的写字，我记得巅峰时刻一周三份预习报告，三份实验报告，写起来真的挺累的。</p><p>大三的时候，上课上三传一反，化工原理，化工热力学，反应工程等等，我还是挺喜欢的，很工科哈哈。我记得因为学校评了一个什么认证，所以加了很多课，然后每一门课都有实验课，所以整体的学业压力非常大。大三很多同学都进实验室了，做大创或者做实验发文章，都是为了保研做准备。</p><p>大四的时候，上半学期还是一堆课，分离工程什么的，还有一堆实验课。然后上完课以后，还有实习，去金山的化工厂，早上很早就要起来，坐班车一两个小时到化工园区。说是实习，实际上就是听听讲座，逛逛园区，味道还挺大的。里面的工程师不会让你干活的，谁放心呢。记得里面的食堂做的甜点还挺好吃的。上半学期结束就是考研了。下半学期就是搞毕业论文了，有两种，做模拟的和做实验的。做模拟挺爽的，待在宿舍就行。做实验的就要天天去实验室了，这时候可以感受一下化工读研是什么状态，化工读研我放后面讲。本科毕业论文还是比较水的，那些教授说着我很严格的，实际上还是放你过的。</p><p>整体上我评价一下化工本科生活的话，那就是课多实验多，很累很辛苦。</p><p>最后讲一下同学的去向吧。一些同学直博清华天大化工。一些同学转行了，去了金融业，或者跨考去了CS，还有去国外读研CS的。大部分同学都是保研考研了本校化工。化工读研还是挺苦的，每天在实验室从早上八点到晚上十一点做实验，导师push你发论文，还有做项目。再说说就业情况，有同学去了会计所，也有码农的，留在化工行业的话，有同学本科毕业进了中石油，研究生毕业的话，可以去设计院还有外企比如巴斯夫之类，还有去化工零售行业当客户经理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本科就读于化工专业很强势的学校，信息学院的院士也是搞化工的哈哈。我按照时间的顺序叙述，由于毕业两三年了，记忆可能有一些小差错。&lt;/p&gt;
&lt;p&gt;大一的时候，就是各种基础课，高数线代等等，还有C语言这些课，工科该有的基础课都有。&lt;/p&gt;
&lt;p&gt;大二的时候，开始上四大化学了，比较</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>天坑专业跑路有感</title>
    <link href="https://stardust-sudo.github.io/2022/04/24/4ee543e571ec/"/>
    <id>https://stardust-sudo.github.io/2022/04/24/4ee543e571ec/</id>
    <published>2022-04-24T13:26:08.000Z</published>
    <updated>2022-04-25T14:36:08.847Z</updated>
    
    <content type="html"><![CDATA[<p>我本科化工，读研CS，对转行这件事有了一些感悟。</p><p>- 我觉得非科班和科班最大的差距倒不是理论，那些基础内容看书看视频就能赶上，差距体现在项目和实习上，优秀的科班本科四年参与了很多项目，参加了很多比赛，有几段实习，在面试时候和面试官有得聊，这方面对于非科班优势很大。</p><p>- 读研CS并不一定能助力你以后的发展。CS也分很多方向，有同学天坑跨专业保研到ai大牛手下，发了好文章，读研看的资料，对于找算法岗有用，这种就是因为读研CS收益。而大部分天坑出身的考研党，选不到好方向的老师当导师，因为这些老师大部分已经被保研的同学抢了，剩下一些老师被考研同学里面优秀的的科班同学抢了，很多天坑跨考的同学，只能选到一些冷门方向的老师。冷门方向老师，读研期间让你做的项目和发的论文，对找工作用处不大，冷门方向工业界应用还不广泛，也就是说在冷门CS方向读研用处不大。</p><p>- 想以后进入计算机行业，并不一定需要读CS的研究生。可以选择保研本专业，或者选个好考的专业，然后选择一个比较松的导师，平时自学计算机的东西，一样是可以进好公司的。</p><p>- 天坑学生选择进入CS需要慎重，某乎上一堆跨专业进大厂的例子看得的确很爽，但是实际上，天坑跨专业没有那么容易的，而且各行各业转CS，搞得校招非常卷。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我本科化工，读研CS，对转行这件事有了一些感悟。&lt;/p&gt;
&lt;p&gt;- 我觉得非科班和科班最大的差距倒不是理论，那些基础内容看书看视频就能赶上，差距体现在项目和实习上，优秀的科班本科四年参与了很多项目，参加了很多比赛，有几段实习，在面试时候和面试官有得聊，这方面对于非科班优势很</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>6-多表查询 尚硅谷MySQL入门到高级-宋红康版笔记</title>
    <link href="https://stardust-sudo.github.io/2022/04/19/54c75e660140/"/>
    <id>https://stardust-sudo.github.io/2022/04/19/54c75e660140/</id>
    <published>2022-04-19T04:49:01.000Z</published>
    <updated>2022-04-19T04:49:39.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h1><p>为什么设置多表，而不是集中一张表</p><ol><li>集中在一张表，会出现数据的冗余</li><li>多张表，可以同时访问，集中在一张表，这张表被锁定之后，其他不能进行访问</li></ol><h2 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h2><p>A表与B表连接，A表的每一条记录与B表的每一条记录都匹配过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees,departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">JOIN</span> departments;</span><br></pre></td></tr></table></figure><p>多表查询需要有连接条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`;</span><br></pre></td></tr></table></figure><h1 id="多表查询的分类"><a href="#多表查询的分类" class="headerlink" title="多表查询的分类"></a>多表查询的分类</h1><h2 id="等值连接-x2F-非等值连接"><a href="#等值连接-x2F-非等值连接" class="headerlink" title="等值连接&#x2F;非等值连接"></a>等值连接&#x2F;非等值连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 非等值连接</span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,e.salary,j.grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> job_grades j</span><br><span class="line"><span class="keyword">ON</span> e.`salary`<span class="operator">&gt;=</span>j.`lowest_sal`<span class="keyword">AND</span> e.`salary`<span class="operator">&lt;=</span>j.`highest_sal`;</span><br></pre></td></tr></table></figure><h2 id="自连接-x2F-非自连接"><a href="#自连接-x2F-非自连接" class="headerlink" title="自连接&#x2F;非自连接"></a>自连接&#x2F;非自连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 自连接</span><br><span class="line"><span class="keyword">SELECT</span> emp.employee_id,emp.last_name,mgr.employee_id,mgr.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees emp <span class="keyword">JOIN</span> employees mgr</span><br><span class="line"><span class="keyword">ON</span> emp.`manager_id`<span class="operator">=</span>mgr.`employee_id`;</span><br></pre></td></tr></table></figure><h2 id="内连接-x2F-外连接"><a href="#内连接-x2F-外连接" class="headerlink" title="内连接&#x2F;外连接"></a>内连接&#x2F;外连接</h2><p><strong>内连接</strong>：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行</p><p><strong>外连接</strong>：合并具有同一列的两个以上的表的行，结果集中除了包含一个表与另一个表匹配的行之外，还查询到左表或者右表中不匹配的行</p><p><strong>外连接的分类</strong>：左外连接、右外连接、满外连接</p><p><strong>左外连接</strong>：两个表在连接过程中除了返回满足连接条件的行以外，还返回左表中不满足条件的行</p><p><strong>右外连接</strong>：两个表在连接过程中除了返回满足连接条件的行以外，还返回右表中不满足条件的行</p><p><strong>满外连接</strong>：两个表在连接过程中除了返回满足连接条件的行以外，还返回左右表中不满足条件的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 内连接</span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,d.department_name,l.city</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> d.`location_id`<span class="operator">=</span>l.`location_id`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,d.department_name,city</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d <span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id` <span class="keyword">AND</span> d.`location_id`<span class="operator">=</span>l.`location_id`;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 左外连接</span><br><span class="line"># 查询所有员工的last_name,department_name信息</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`;</span><br><span class="line"># 右外连接</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`;</span><br><span class="line"># 右外连接</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e  <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`;</span><br></pre></td></tr></table></figure><h1 id="UNION的使用"><a href="#UNION的使用" class="headerlink" title="UNION的使用"></a>UNION的使用</h1><p>利用UNION关键字，可以给出多条SELECT语句，并将他们的结果集组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且互相对应。各个SELECT语句之间使用UNION或UNION ALL关键字分隔。</p><p>语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure><p>UNION操作符：返回两个查询的结果集的并集，并去除重复记录</p><p>UNION ALL操作符：返回两个查询的结果集的并集，不去除重复记录</p><p>UNION ALL执行效率比UNION高，优先使用UNION ALL，UNION需要去重，执行效率低</p><h1 id="7种UNION操作"><a href="#7种UNION操作" class="headerlink" title="7种UNION操作"></a>7种UNION操作</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 内连接</span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`;</span><br><span class="line"># 左外连接</span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`;</span><br><span class="line"># 右外连接</span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`;</span><br><span class="line"># 左表<span class="operator">-</span>右表</span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"># 右表<span class="operator">-</span>左表</span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"># 满外连接 左表并右表</span><br><span class="line"># 左外连接 <span class="keyword">UNION</span> <span class="keyword">ALL</span> 右表<span class="operator">-</span>左表</span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"># 左表并右表<span class="operator">-</span>左表交右表</span><br><span class="line"># 左表<span class="operator">-</span>右表 <span class="keyword">UNION</span> <span class="keyword">ALL</span> 右表<span class="operator">-</span>左表</span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h1 id="SQL99语法新特性：自然连接"><a href="#SQL99语法新特性：自然连接" class="headerlink" title="SQL99语法新特性：自然连接"></a>SQL99语法新特性：自然连接</h1><p>自然连接会自动查询两张表中相同的字段，然后进行等值连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employee e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">AND</span> e.manager_id <span class="operator">=</span> d.manager_id;</span><br><span class="line"># 等价于</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employee e <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> departments d；</span><br></pre></td></tr></table></figure><h1 id="SQL99语法新特性：USING"><a href="#SQL99语法新特性：USING" class="headerlink" title="SQL99语法新特性：USING"></a>SQL99语法新特性：USING</h1><p>USING括号内填入同名字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employee e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"># 等价于</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employee e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">USING</span> (department_id);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多表连接&quot;&gt;&lt;a href=&quot;#多表连接&quot; class=&quot;headerlink&quot; title=&quot;多表连接&quot;&gt;&lt;/a&gt;多表连接&lt;/h1&gt;&lt;p&gt;为什么设置多表，而不是集中一张表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集中在一张表，会出现数据的冗余&lt;/li&gt;
&lt;li&gt;多张表，可以同</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>5-排序与分页 尚硅谷MySQL入门到高级-宋红康版笔记</title>
    <link href="https://stardust-sudo.github.io/2022/04/18/dafef111a9ee/"/>
    <id>https://stardust-sudo.github.io/2022/04/18/dafef111a9ee/</id>
    <published>2022-04-18T10:53:00.000Z</published>
    <updated>2022-04-18T10:53:48.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a>排序规则</h2><ul><li>使用ORDER BY子句进行排序<ul><li>ASC(ascend) 升序</li><li>DESC(descend) 降序</li></ul></li><li>ORDER BY子句放在SELECT语句结尾</li><li>没有使用ORDER BY子句的情况下，默认呈现的顺序是数据添加的先后顺序</li><li>ORDER BY子句默认使用ASC升序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ul><li>列的别名只能在ORDER BY子句中使用，不能在WHERE子句中使用</li><li>二级排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 显示员工排序，按照department_id的降序排列，salary的升序排序</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,salary,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id <span class="keyword">DESC</span>, salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">20</span>;#偏移量为<span class="number">0</span>，显示的条目数为<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">20</span>;#偏移量省略时默认为<span class="number">0</span>，显示的条目数为<span class="number">20</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 每页显示pageSize条记录，此时显示第pageNo页</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT (pageNo<span class="number">-1</span>)<span class="operator">*</span>pageSize,pageSize;</span><br></pre></td></tr></table></figure><p>WHERE … ORDER BY … LIMIT声明顺序如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">6000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>MySQL8.0新特性：LIMIT … OFFSET …</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">31</span>,<span class="number">2</span>;</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">2</span> <span class="keyword">OFFSET</span> <span class="number">31</span>;#<span class="number">2</span>表示显示的条目数，<span class="number">31</span>表示偏移量</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h1&gt;&lt;h2 id=&quot;排序规则&quot;&gt;&lt;a href=&quot;#排序规则&quot; class=&quot;headerlink&quot; title=&quot;排序规则&quot;&gt;&lt;/a&gt;排序规则&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>4-运算符 尚硅谷MySQL入门到高级-宋红康版笔记</title>
    <link href="https://stardust-sudo.github.io/2022/04/18/53005410932e/"/>
    <id>https://stardust-sudo.github.io/2022/04/18/53005410932e/</id>
    <published>2022-04-18T10:52:00.000Z</published>
    <updated>2022-04-18T10:52:57.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>+ - * &#x2F; div % mod</p><h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><p>比较结果为真返回1，比较结果为假返回0，其他情况返回null</p><ol><li>&#x3D; &lt;&#x3D;&gt; &lt;&gt; !&#x3D; &lt; &lt;&#x3D; &gt; &gt;&#x3D;</li></ol><p>&lt;&#x3D;&gt;安全等于，可以用来对NULL进行判断，在两个操作数均为NULL时，返回1；在一个操作数为NULL时，返回0</p><ol start="2"><li><p>IS NULL&#x2F; IS NOT NULL&#x2F;ISNULL(param)</p></li><li><p>LEAST(p1,p2,p3)&#x2F;GREATEST(p1,p2,p3)</p></li><li><p>BETWEEEN a AND b 表示[a,b]之内，包含边界</p></li><li><p>IN (set)&#x2F;NOT IN (set)</p></li><li><p>LIKE 模糊查询</p></li></ol><p>查询last_name包含a的员工信息，<code>... WHERE last_name LIKE &#39;%a%&#39;;</code>,百分号  %  代表不确定个数的字符，包括0个</p><p>查询last_name第二个字符是a的员工信息，<code>... WHERE last_name LIKE &#39;_a%&#39;</code>，下划线  _  代表一个不确定的字符</p><p>查询last_name第二个字符是_且第三个字符是a的员工信息，<code>... WHERE last_name LIKE &#39;_\_a%&#39;</code>，斜杠  \  表示转义</p><ol start="7"><li>REGEXP&#x2F;RLIKE 正则表达式</li></ol><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>NOT&#x2F;!</p><p>AND&#x2F;&amp;&amp;</p><p>OR&#x2F;||</p><p>XOR</p><p>AND优先级高于OR</p><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>&amp;&#x2F;|&#x2F;^&#x2F;~&#x2F;&gt;&gt;&#x2F;&lt;&lt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算术运算符&quot;&gt;&lt;a href=&quot;#算术运算符&quot; class=&quot;headerlink&quot; title=&quot;算术运算符&quot;&gt;&lt;/a&gt;算术运算符&lt;/h1&gt;&lt;p&gt;+ - * &amp;#x2F; div % mod&lt;/p&gt;
&lt;h1 id=&quot;比较运算符&quot;&gt;&lt;a href=&quot;#比较运算符&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>3-基本的SELECT语句 尚硅谷MySQL入门到高级-宋红康版笔记</title>
    <link href="https://stardust-sudo.github.io/2022/04/18/c91312a92d34/"/>
    <id>https://stardust-sudo.github.io/2022/04/18/c91312a92d34/</id>
    <published>2022-04-18T10:50:38.311Z</published>
    <updated>2022-04-18T10:52:13.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h1><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><ul><li><p>DDL(Data Definition Language，数据定义语言)，这些语句定义了不同的数据库、表、视图、索引等数据库对象、还可以用来创建、删除、修改数据库和数据表的结构</p><ul><li>主要的语句关键字包括CREATE、DROP、ALTER、RENAME、TRUNCATE（清空数据）等</li></ul></li><li><p>DML(Data Manipulation Language，数据操作语言)，用于添加、删除、更新和查询数据库记录，并检查数据完整性</p><ul><li>主要的语句关键字包括INSERT、DELETE、UPDATE、SELECT等</li><li>SELECT是SQL语言的基础，最为重要</li></ul></li><li><p>DCL(Data Control Language，数据控制语言)，用于定义数据库、表、字段、用户的访问权限和安全级别</p><ul><li>主要的语句关键字包括GRANT、REVOKE、COMMIT、ROLLBACK、SAVEPOINT等</li></ul></li></ul><h1 id="SQL语言的规则与规范"><a href="#SQL语言的规则与规范" class="headerlink" title="SQL语言的规则与规范"></a>SQL语言的规则与规范</h1><h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><ul><li>各个子句分行写</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Emp;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;TOM&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>语句以；、\g或者\G结尾，;、\g与\G效果不同</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table employee;</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table    | Create Table                                                                                                              |</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| employee | CREATE TABLE `employee` (</span><br><span class="line">  `id` int DEFAULT NULL,</span><br><span class="line">  `name` varchar(15) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; show create table employee\g</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table    | Create Table                                                                                                              |</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| employee | CREATE TABLE `employee` (</span><br><span class="line">  `id` int DEFAULT NULL,</span><br><span class="line">  `name` varchar(15) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+----------+---------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; show create table employee\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: employee</span><br><span class="line">Create Table: CREATE TABLE `employee` (</span><br><span class="line">  `id` int DEFAULT NULL,</span><br><span class="line">  `name` varchar(15) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>字符串、日期时间类型的变量需要使用一对单引号’’表示</li><li>列的别名使用双引号””表示，不建议省略as</li></ul><h2 id="SQL大小写规范"><a href="#SQL大小写规范" class="headerlink" title="SQL大小写规范"></a>SQL大小写规范</h2><ul><li>MySQL在Windows环境下大小写不敏感</li><li>MySQL在Linux环境下大小写不敏感<ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的</li><li>关键字、函数名、列名（或字段名）、列的别名（或字段的别名）是忽略大小写的</li></ul></li><li>推荐采用统一的书写规范<ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL关键字、函数名、绑定变量等都大写</li></ul></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 单行注释</span><br><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="导入现有数据"><a href="#导入现有数据" class="headerlink" title="导入现有数据"></a>导入现有数据</h2><ol><li>命令行下输入<code>source 文件的全路径名</code></li><li>基于具体的图形化界面工具导入数据</li></ol><h1 id="基本的SELECT语句"><a href="#基本的SELECT语句" class="headerlink" title="基本的SELECT语句"></a>基本的SELECT语句</h1><h2 id="SELECT-…"><a href="#SELECT-…" class="headerlink" title="SELECT …"></a>SELECT …</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">9</span><span class="operator">/</span><span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;# DUAL伪表</span><br></pre></td></tr></table></figure><h2 id="SELECT-…-FROM-…"><a href="#SELECT-…-FROM-…" class="headerlink" title="SELECT … FROM …"></a>SELECT … FROM …</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="operator">*</span>表示表中所有字段</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h2 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">as</span>全称alias（别名），可以省略</span><br><span class="line"># 列的别名可以用一对&quot;&quot;引起来</span><br><span class="line"><span class="keyword">SELECT</span> employee_id emp_id,last_name <span class="keyword">AS</span> lname,department_id &quot;部门id&quot;, salary <span class="operator">*</span> <span class="number">12</span> &quot;annual sal&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h2 id="去除重复行"><a href="#去除重复行" class="headerlink" title="去除重复行"></a>去除重复行</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h2 id="空值参与计算"><a href="#空值参与计算" class="headerlink" title="空值参与计算"></a>空值参与计算</h2><p>空值：null</p><p>空值参与运算，结果为空值null</p><h2 id="着重号-96-96"><a href="#着重号-96-96" class="headerlink" title="着重号&#96;&#96;"></a>着重号&#96;&#96;</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 关键字作为表名，使用``着重号区别于关键字</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">order</span>`;</span><br></pre></td></tr></table></figure><h2 id="查询常数"><a href="#查询常数" class="headerlink" title="查询常数"></a>查询常数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;Company&#x27;</span>,<span class="number">123</span>,employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h1 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> employees;</span><br><span class="line"><span class="keyword">DESC</span> employees;</span><br></pre></td></tr></table></figure><h1 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> deoartment_id <span class="operator">=</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL概述&quot;&gt;&lt;a href=&quot;#SQL概述&quot; class=&quot;headerlink&quot; title=&quot;SQL概述&quot;&gt;&lt;/a&gt;SQL概述&lt;/h1&gt;&lt;h2 id=&quot;SQL分类&quot;&gt;&lt;a href=&quot;#SQL分类&quot; class=&quot;headerlink&quot; title=&quot;SQL</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2-MySQL环境搭建 尚硅谷MySQL入门到高级-宋红康版笔记</title>
    <link href="https://stardust-sudo.github.io/2022/04/16/2f9d25f4a0d8/"/>
    <id>https://stardust-sudo.github.io/2022/04/16/2f9d25f4a0d8/</id>
    <published>2022-04-16T15:17:09.000Z</published>
    <updated>2022-04-16T15:17:41.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL的卸载"><a href="#MySQL的卸载" class="headerlink" title="MySQL的卸载"></a>MySQL的卸载</h1><ul><li>停止MySQL服务 打开任务管理器，停止MySQL服务</li><li>卸载软件 在控制面板卸载MySQL</li><li>找到MySQL的目录，删除数据（选做）</li><li>删除环境变量</li><li>重启电脑</li></ul><h1 id="MySQL的下载、安装与配置"><a href="#MySQL的下载、安装与配置" class="headerlink" title="MySQL的下载、安装与配置"></a>MySQL的下载、安装与配置</h1><h2 id="MySQL的四大版本"><a href="#MySQL的四大版本" class="headerlink" title="MySQL的四大版本"></a>MySQL的四大版本</h2><ul><li>Community Server 社区版本，开源免费，不提供官方技术支持</li><li>Enterprise Edition  企业版本，付费，官方技术支持</li><li>Cluster 集群版本，开源免费</li><li>Cluster CGE 高级集群版本，付费</li></ul><p> MySQL Workbench(GUITOOL)一款专为MySQL设计的图形界面管理工具</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>官网</p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>Choosing a Setup Type 选择Custom自定义</li><li>Select Products 选择MySQL Server，点击MySQL Server，会跳出来一个Advanced Options，点击Advanced Options，选择软件安装路径和数据库存储路径</li><li>环境变量配置</li></ul><h1 id="MySQL的登录"><a href="#MySQL的登录" class="headerlink" title="MySQL的登录"></a>MySQL的登录</h1><h2 id="服务的启动和停止"><a href="#服务的启动和停止" class="headerlink" title="服务的启动和停止"></a>服务的启动和停止</h2><p>图形化界面 进入计算机管理的界面</p><p>命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启动MySQL服务命令</span><br><span class="line">net start MySQL服务名</span><br><span class="line"># 停止MySQL服务命令</span><br><span class="line">net stop MySQL服务名</span><br></pre></td></tr></table></figure><h2 id="登录与退出"><a href="#登录与退出" class="headerlink" title="登录与退出"></a>登录与退出</h2><ul><li>连接数据库的命令</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p -hlocalhost -P3306</span><br></pre></td></tr></table></figure><p>-u 用户名</p><p>-p 密码</p><p>-h IP，默认127.0.0.1，此参数可省略</p><p>-P 端口号 默认3306，此参数可省略</p><ul><li>查看mysql版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><ul><li>退出登录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h1 id="MySQL演示使用"><a href="#MySQL演示使用" class="headerlink" title="MySQL演示使用"></a>MySQL演示使用</h1><ul><li>查看所有的数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p><strong>information_scheme</strong> MySQL自带的数据库，主要保存MySQL数据库服务器的系统信息，比如数据库的名称、数据表的名称，字段名称、存取权限、数据文件所在的文件夹和系统使用的文件夹</p><p><strong>performance_scheme</strong> MySQL自带的数据库，用来监控MySQL的各类性能指标</p><p><strong>sys</strong> MySQL自带的数据库，主要作用是以一种更容易被理解的方式展现MySQL数据库服务器的各类性能指标，帮助系统管理员和开发人员监控MySQL的技术性能</p><p><strong>mysql</strong> 保存了MySQL数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的字符集、约束检查信息等</p><ul><li>创建数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database dbtest2;</span><br></pre></td></tr></table></figure><ul><li>创建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(id <span class="type">int</span>,name <span class="type">varchar</span>(<span class="number">15</span>));</span><br></pre></td></tr></table></figure><ul><li>查询数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><ul><li>插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;tom&#x27;</span>);</span><br></pre></td></tr></table></figure><p>5.7版本下<code>insert into employee values(1002,&#39;杰瑞&#39;);</code>会报错，charset&#x3D;latin1</p><p>8.0版本下<code>insert into employee values(1002,&#39;杰瑞&#39;);</code> 正常运行，charset&#x3D;utf8</p><ul><li>展示表&#x2F;数据库的元数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> employee;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database dbtest1;</span><br></pre></td></tr></table></figure><ul><li>查看字符集以及字符比较规则</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;character_%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;collation_%&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>修改字符编码和字符比较规则</li></ul><p>找到my.ini文件，使用notepad++打开并修改</p><p>[mysql] </p><p>default-character-set&#x3D;utf8</p><p>[mysqld]</p><p>character-set-server&#x3D;utf8</p><p>collation-server&#x3D;utf8_general-ci</p><ul><li>删除数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> dbtest2;</span><br></pre></td></tr></table></figure><h1 id="MySQL图形化管理工具"><a href="#MySQL图形化管理工具" class="headerlink" title="MySQL图形化管理工具"></a>MySQL图形化管理工具</h1><p>Workbench（官方）&#x2F;Navicat&#x2F;SQLyog&#x2F;dbeaver</p><p>SQLyog Ctrl+滚轮，可以修改文字大小</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL的卸载&quot;&gt;&lt;a href=&quot;#MySQL的卸载&quot; class=&quot;headerlink&quot; title=&quot;MySQL的卸载&quot;&gt;&lt;/a&gt;MySQL的卸载&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;停止MySQL服务 打开任务管理器，停止MySQL服务&lt;/li&gt;
&lt;li&gt;卸载软</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>1-数据库概述 尚硅谷MySQL入门到高级-宋红康版笔记</title>
    <link href="https://stardust-sudo.github.io/2022/04/16/10b6ee4720f2/"/>
    <id>https://stardust-sudo.github.io/2022/04/16/10b6ee4720f2/</id>
    <published>2022-04-15T17:32:23.000Z</published>
    <updated>2022-04-16T02:32:56.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么使用数据库"><a href="#为什么使用数据库" class="headerlink" title="为什么使用数据库"></a>为什么使用数据库</h1><p>为了将数据持久化到硬盘上</p><h1 id="数据库与数据库管理系统"><a href="#数据库与数据库管理系统" class="headerlink" title="数据库与数据库管理系统"></a>数据库与数据库管理系统</h1><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><p>DB 数据库 Database</p><p>DBMS 数据库管理系统 Database Management System</p><p>SQL 结构化查询语言 Structured Query Language </p><h2 id="数据库与数据库管理系统-1"><a href="#数据库与数据库管理系统-1" class="headerlink" title="数据库与数据库管理系统"></a>数据库与数据库管理系统</h2><p>数据库管理系统管理多个数据库，数据库包含多张表，每张表包含多条记录</p><h2 id="常见的数据库管理系统排名"><a href="#常见的数据库管理系统排名" class="headerlink" title="常见的数据库管理系统排名"></a>常见的数据库管理系统排名</h2><p>Oracle&#x2F;MySQL&#x2F;Microsoft SQL Server&#x2F;PostgreSQL&#x2F;MongoDB&#x2F;Redis&#x2F;IBM DB2&#x2F;Elasticsarch</p><h2 id="常见数据库介绍"><a href="#常见数据库介绍" class="headerlink" title="常见数据库介绍"></a>常见数据库介绍</h2><p>Oracle </p><p>SQL Server 微软开发；C#和.net使用</p><p>DB2 常应用在银行系统中</p><p>PostgreSQL 稳定性强；最符合SQL标准；开放源码</p><p>SyBase 提供数据建模工具PowerDesigner</p><p>SQLite 嵌入式小型数据库；应用在手机端；不用安装配置启动；系统崩溃后不做任何恢复操作，再下次使用数据库自动恢复</p><p>informix IBM开发；取名是information和unix的结合；仅仅运行于linux&#x2F;unix上；性能高，支持集群，适用于安全性要求高的系统，尤其是银行&#x2F;证券系统的应用</p><h1 id="MySQL介绍"><a href="#MySQL介绍" class="headerlink" title="MySQL介绍"></a>MySQL介绍</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>开源代码；关系型数据库管理系统</li><li>关联数据库管理系统，数据保存在不同表中，而不是所有数据在一个大仓库内</li><li>采用GPL协议（GNU General Public License），可以修改源码来开发自己的MySQL系统</li></ul><h1 id="RDBS与非RDBS"><a href="#RDBS与非RDBS" class="headerlink" title="RDBS与非RDBS"></a>RDBS与非RDBS</h1><h2 id="关系型数据库RDBS"><a href="#关系型数据库RDBS" class="headerlink" title="关系型数据库RDBS"></a>关系型数据库RDBS</h2><h3 id="实质"><a href="#实质" class="headerlink" title="实质"></a>实质</h3><ul><li>将数据结构归为二维表格</li><li>行和列组成表，一组表组成库</li><li>关系模型，表与表之间存在一定的关系</li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>一表或者多表进行复杂查询</li><li>支持事务</li></ul><h2 id="非关系型数据库（非RDBS）"><a href="#非关系型数据库（非RDBS）" class="headerlink" title="非关系型数据库（非RDBS）"></a>非关系型数据库（非RDBS）</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>基于键值对存储数据，不需要使用SQL，性能高</p><p>使用场景，例如日志收集、排行榜、定时器等</p><h3 id="有哪些非关系型数据库"><a href="#有哪些非关系型数据库" class="headerlink" title="有哪些非关系型数据库"></a>有哪些非关系型数据库</h3><p>键值型数据库 Redis</p><p>文档型数据库 MongoDB，存储XML、JSON等格式</p><p>搜索引擎数据库 Elasticsearch</p><p>列式数据库 HBase，MySQL都是行式存储，列式数据库是列式存储</p><p>图形数据库 图结构</p><h1 id="关系型数据库设计规则"><a href="#关系型数据库设计规则" class="headerlink" title="关系型数据库设计规则"></a>关系型数据库设计规则</h1><h2 id="表、记录、字段"><a href="#表、记录、字段" class="headerlink" title="表、记录、字段"></a>表、记录、字段</h2><ul><li>E-R（entity-relationship，实体-联系）模型中有三个主要的概念：实体集、属性、联系集</li><li>一个实体集（class）对应数据库中的一张表（table）；一个实体（instance）对应数据库表中的一行（row），也称为一条记录（record）；一个属性（attribute）对应数据库中的一列（column），也称为一个字段（field）</li><li>ORM思想（Object Relational Mapping） <ul><li>数据库中的一个表，对应Java中的一个类</li><li>表中一条记录，对应Java中的一个对象</li><li>表中的一个列，对应类中的一个字段、属性（field）</li></ul></li></ul><h2 id="表的关联关系"><a href="#表的关联关系" class="headerlink" title="表的关联关系"></a>表的关联关系</h2><ul><li>表与表数据记录之间存在关系（relationship）</li><li>分类 一对一、一对多、多对多和自我引用</li></ul><h3 id="一对一关联"><a href="#一对一关联" class="headerlink" title="一对一关联"></a>一对一关联</h3><p>两张表的记录一一对应</p><h3 id="一对多关联"><a href="#一对多关联" class="headerlink" title="一对多关联"></a>一对多关联</h3><p>A表中的记录a，对应B表中多条记录</p><h3 id="多对多关联"><a href="#多对多关联" class="headerlink" title="多对多关联"></a>多对多关联</h3><p>三张表，表A与表B是一对多关系，表C与表B是一对多关系，那么表A与表C是多对多关系</p><h3 id="自我引用"><a href="#自我引用" class="headerlink" title="自我引用"></a>自我引用</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么使用数据库&quot;&gt;&lt;a href=&quot;#为什么使用数据库&quot; class=&quot;headerlink&quot; title=&quot;为什么使用数据库&quot;&gt;&lt;/a&gt;为什么使用数据库&lt;/h1&gt;&lt;p&gt;为了将数据持久化到硬盘上&lt;/p&gt;
&lt;h1 id=&quot;数据库与数据库管理系统&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>1-概论 《计算机网络教程：自顶向下方法》读书笔记</title>
    <link href="https://stardust-sudo.github.io/2022/04/15/975757a4ae64/"/>
    <id>https://stardust-sudo.github.io/2022/04/15/975757a4ae64/</id>
    <published>2022-04-15T12:29:05.000Z</published>
    <updated>2022-04-15T12:29:45.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Internet概览"><a href="#Internet概览" class="headerlink" title="Internet概览"></a>Internet概览</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li>局域网</li><li>广域网</li><li>互联网络</li></ul><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><ul><li>电路交换网络 </li><li>分组交换网络</li></ul><h2 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h2><p>Internet服务提供商 Internet Service Provider ISP</p><h2 id="访问Internet"><a href="#访问Internet" class="headerlink" title="访问Internet"></a>访问Internet</h2><ul><li>使用电话网络<ul><li>拨号服务 使用调制解调器将数据转换成语音；安装在计算机中的软件拨打ISP的号码，形成电话连接；上网的同时不能打电话</li><li>DSL服务 Digital Subscriber Line；可以边打打电话边上网</li></ul></li><li>利用有线电视网络 </li><li>采用无线网络 </li><li>直接连接到Internet 自身成为ISP接入Internet</li></ul><h1 id="协议分层"><a href="#协议分层" class="headerlink" title="协议分层"></a>协议分层</h1><p>协议：发送者、接收者和中间设备需要遵循的规则</p><p>协议分层优越性</p><ul><li>整套协议系统，如果需要做改动，只需要更换某层协议即可，在单一分层的情况下，需要更换整套系统</li><li>如果使用单一分层，那么这一层提供服务的时候，需要考虑底层实现，使用协议分层的情况下，高层协议提供服务，只需要调用低层服务，而不需要考虑低层实现</li><li>两个端点通信，需要经过中间设备，单一分层的情况下，中间设备需要考虑整体协议系统，协议分层的情况下，中间设备只需要考虑某几层协议</li></ul><p>协议分层原则</p><ul><li>协议需要需要实现两个方向的任务：接收上层数据，进行封装，传递到下层；接收下层数据，解封装，传递到上层</li><li>两个端点通信，协议每一层的对象都相同，比如都是主机或者进程</li></ul><p>逻辑连接</p><p>两个端点通信，在A层协议上达成逻辑连接</p><h2 id="TCP-x2F-IP协议簇"><a href="#TCP-x2F-IP协议簇" class="headerlink" title="TCP&#x2F;IP协议簇"></a>TCP&#x2F;IP协议簇</h2><p>Transmission Control Protocol&#x2F;Internet Protocol</p><h3 id="TCP-x2F-IP分层"><a href="#TCP-x2F-IP分层" class="headerlink" title="TCP&#x2F;IP分层"></a>TCP&#x2F;IP分层</h3><p>应用层&#x2F;传输层&#x2F;网络层&#x2F;数据链路层&#x2F;物理层</p><p><strong>应用层</strong> 两个进程之间的通信</p><p><strong>传输层</strong> 接收应用层的消息，封装成用户数据报发送</p><p><strong>网络层</strong> 两个主机之间的通信</p><p><strong>数据链路层</strong> 接收数据报，封装成帧进行发送</p><p><strong>物理层</strong> </p><h3 id="封装和解封装"><a href="#封装和解封装" class="headerlink" title="封装和解封装"></a>封装和解封装</h3><p>源主机的封装</p><ul><li><strong>应用层</strong> 数据称为消息 message</li><li><strong>传输层</strong> 在应用层消息的基础上，添加传输层头部，分装成段 segment（针对TCP协议）或者用户数据报 user datagram（针对UDP协议）</li><li><strong>网络层</strong> 在传输层段的基础上，添加头部，封装成数据报 datagram</li><li><strong>数据链路层</strong> 在传输层数据报的基础上，添加头部，封装成帧</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><ul><li><strong>应用层</strong> 名字，比如someorg.com</li><li><strong>传输层</strong> 端口，指的是应用层程序</li><li><strong>网络层</strong> </li><li><strong>数据链路层</strong> MAC地址</li></ul><h3 id="多路复用与多路分解"><a href="#多路复用与多路分解" class="headerlink" title="多路复用与多路分解"></a>多路复用与多路分解</h3><ul><li>多路复用 低层协议可以封装多种上层协议分组，一次一个</li><li>多路分解 低层协议解封装数据之后，可以投递到多种上层协议</li></ul><h1 id="Internet发展史"><a href="#Internet发展史" class="headerlink" title="Internet发展史"></a>Internet发展史</h1><p>分组交换网络 ARPAENET</p><p>网关 连接两个网络</p><p>TCP&#x2F;IP</p><p>MLNET&#x2F;CSNET&#x2F;NSFNET&#x2F;ANSNET</p><p>WWW万维网&#x2F;多媒体&#x2F;P2P</p><h1 id="标准与管理"><a href="#标准与管理" class="headerlink" title="标准与管理"></a>标准与管理</h1><h2 id="Internet标准"><a href="#Internet标准" class="headerlink" title="Internet标准"></a>Internet标准</h2><p>Internet草案 RFC(Request for Comment)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Internet概览&quot;&gt;&lt;a href=&quot;#Internet概览&quot; class=&quot;headerlink&quot; title=&quot;Internet概览&quot;&gt;&lt;/a&gt;Internet概览&lt;/h1&gt;&lt;h2 id=&quot;网络&quot;&gt;&lt;a href=&quot;#网络&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java高阶编程 尚硅谷宋红康Java核心基础笔记</title>
    <link href="https://stardust-sudo.github.io/2022/04/14/9e09111143b6/"/>
    <id>https://stardust-sudo.github.io/2022/04/14/9e09111143b6/</id>
    <published>2022-04-14T11:03:56.000Z</published>
    <updated>2022-04-16T00:36:35.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ul><li>进程对应堆和方法区，线程对应栈和程序计数器1</li><li>进程包含多个线程，线程共用进程的堆和方法区</li></ul><h2 id="线程的创建和使用"><a href="#线程的创建和使用" class="headerlink" title="线程的创建和使用"></a>线程的创建和使用</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名类的写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Mthread</span> <span class="variable">mthread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mthread</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mthread);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mthread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名类的写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><p>与使用Runnable相比，Callable功能更强大</p><ul><li>相比run()方法，call()方法可以有返回值</li><li>支持方法抛异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类获取返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NumThread</span> <span class="variable">numThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumThread</span>();</span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(numThread);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">sum</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>使用线程池的好处</p><ul><li>提高响应速度，减少了创建新线程的时间</li><li>降低资源消耗，重复利用线程池中线程，不用重复创建</li><li>便于线程管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">numThread</span>());<span class="comment">//适合于使用Runnable</span></span><br><span class="line">        Future&lt;Integer&gt; future = executorService.submit(<span class="keyword">new</span> <span class="title class_">numThread1</span>());<span class="comment">//适合于使用Callable</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(future.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">numThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)           </span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">numThread1</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) </span><br><span class="line">                sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPool1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        System.out.println(executorService.getClass());</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">service</span> <span class="operator">=</span> (ThreadPoolExecutor) executorService;</span><br><span class="line">        <span class="comment">//设置线程池参数</span></span><br><span class="line">        service.setCorePoolSize(<span class="number">15</span>);</span><br><span class="line">        service.setKeepAliveTime(<span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thread类的方法"><a href="#Thread类的方法" class="headerlink" title="Thread类的方法"></a>Thread类的方法</h2><ul><li>start()：启动当前线程，调用此线程的run()</li><li>run()：需要重写此方法，包含了线程主要操作</li><li>currentThread()：静态方法，返回当前执行的线程<code>Thread.currentThread()</code></li><li>getName()：获取当前线程名字<code>Thread.currentThread().getName()</code></li><li>setName()：设置当前线程名字<code>Thread.currentThread().setName()</code></li><li>yield()：释放当前CPU的执行权</li><li>join()：在线程a中调用线程b的join()，此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态</li><li>sleep(long millitime)：让当前线程睡眠指定的millitime毫秒，在指定的millitime毫秒时间内，当前线程是阻塞状态</li><li>isAlive()：判断当前线程是否存活</li></ul><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><ul><li>MAX_PRIORITY：10</li><li>MIN_PRIORITY：1</li><li>NORM_PRIORITY：5</li><li>getPriority()</li><li>setPriority(int p)</li></ul><p>高优先级的线程要抢占低优先级的线的CPU执行权，但是只是从概率上讲，高优先级的线程高概率的情况下被执行，并不意味着只有当高优先级的线程执行完，低优先级的线程才执行</p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>线程安全问题源于多线程操纵共享数据，解决线程安全问题有三种方法</p><h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line">    <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>操作共享数据的代码，即为需要被同步的代码</li><li>共享数据：多个线程共同操作的数据</li><li>同步监视器：锁，任何一个类的对象都可以充当锁，要求多个线程必须共用一把锁，<code>synchronized(this)</code>，<code>synchronized(clazz.class)</code></li></ul><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>如果操纵共享数据的代码完整地声明在一个方法下，可以将此方法声明为同步的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> ReturnType <span class="title function_">function</span><span class="params">(Param param)</span></span><br></pre></td></tr></table></figure><p>同步监视器即为this</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> ReturnType <span class="title function_">function</span><span class="params">(Param param)</span></span><br></pre></td></tr></table></figure><p>同步监视器即为clazz.class</p><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized与lock的异同？</p><p>同：两者都可以解决线程安全问题</p><p>异：synchronized机制在执行完同步代码后，自动释放同步监视器，lock需要手动的启动同步，同时需要手动结束同步</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (a)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (b)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;---&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (b)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (a)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;***&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><ul><li>wait()：一旦执行此方法，当前线程进入阻塞状态，并释放同步监视器</li><li>notify()：一旦执行此方法，就会唤醒wait中的一个线程，如果有多个线程wait，就唤醒优先级高的</li><li>notifyAll()：一旦执行此方法，就会唤醒所有wait中的线程</li><li>wait() notify() notifyAll() 三个方法必须使用在同步代码块或者同步方法中，否则报异常IllegalMonitorStateException</li><li>wait() notify() notifyAll() 三个方法调用者必须是同步代码块或者同步方法中的同步监视器，否则报异常IllegalMonitorStateException</li><li>wait() notify() notifyAll() 三个方法定义在Object类中</li></ul><p>sleep()和wait()的异同？</p><p>同：一旦执行方法，都可以使得当前线程进入阻塞状态</p><p>异：</p><ol><li>Thread类中声明sleep()，Object类中声明wait()</li><li>sleep()可以在任何需要的场景下调用，wait()必须在同步代码块和同步方法中使用</li><li>如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁</li></ol><p>​        </p><h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><ul><li>不可变性：字符串底层使用char[]存储，声明为private和final</li><li>通过字面量的方式<code>String str = &quot;abc&quot;;</code>给字符串赋值，字符串声明在字符串常量池（方法区中），字符串常量池中不会存储相同内容，<code>String str1 = &quot;abc&quot;;</code>和<code>String str2 = &quot;abc&quot;;</code>，str1和str2指向同一个字符串对象</li><li>常量和常量拼接，结果在常量池中；如果拼接中有一个变量，那么结果在堆中；字符串.intern()返回对象在常量池中</li></ul><h3 id="String类常用方法"><a href="#String类常用方法" class="headerlink" title="String类常用方法"></a>String类常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str.length();</span><br><span class="line">str.charAt(<span class="number">0</span>);</span><br><span class="line">str.isEmpty();</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> str.toLowerCase();</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> str.toUpperCase();</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> str.trim();<span class="comment">//返回去除首尾空格的字符串</span></span><br><span class="line">str1.equalsIgnoreCase(str2);<span class="comment">//忽略大小写比较是否相同</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> str1.concat(str2);<span class="comment">//拼接str1和str2，等价于&quot;+&quot;</span></span><br><span class="line">str1.compareTo(str2);<span class="comment">//比较str1和str2的大小，返回值可以理解为str1-str2</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> str.subString(beginIndex);</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> str.subString(beginIndex, endIndex);<span class="comment">//[beginIndex, endIndex)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str.endsWith(suffix);<span class="comment">//是否以suffix字符串结尾</span></span><br><span class="line">str.startsWith(prefix);<span class="comment">//是否以prefix字符串开始</span></span><br><span class="line">str.startsWith(prefix, offset);<span class="comment">//从offset开始是否以prefix字符串开始</span></span><br><span class="line">str.contains(str1);<span class="comment">//判断str中是否包含str1</span></span><br><span class="line">str.indexOf(str1);<span class="comment">//返回子字符串在字符串中第一次出现的索引位置</span></span><br><span class="line">str.indexOf(str1, fromIndex);<span class="comment">//从fromIndex开始，返回子字符串第一次出现的索引位置</span></span><br><span class="line">str.lastIndexOf(str1);<span class="comment">//返回子字符串在最右边出现的索引位置</span></span><br><span class="line">str.lastIndexOf(str1, fromIndex);<span class="comment">//从fromIndex开始，返回子字符串在最右边出现的索引位置</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> str.replace(oldChar, newChar);</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> str.replace(target, replacement);</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> str.replaceAll(regex, replacement);</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> str.replaceFirst(regex, replacement);</span><br><span class="line">str.mathes(regex);<span class="comment">//判断str是否匹配regex正则表达式</span></span><br><span class="line">String[] strs = str.split(regex);<span class="comment">//按照给定的正则表达式拆分此字符串，如果某个字符串符合正则就放到返回数组内</span></span><br><span class="line">String[] strs = str.split(regex, limit);<span class="comment">//按照给定的正则表达式拆分此字符串，如果某个字符串符合正则就放到返回数组内，数组内最多limit个子字符串</span></span><br></pre></td></tr></table></figure><h3 id="String与char-之间的转换"><a href="#String与char-之间的转换" class="headerlink" title="String与char[]之间的转换"></a>String与char[]之间的转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] chars = str,toCharArray();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br></pre></td></tr></table></figure><h3 id="String与byte-之间的转换"><a href="#String与byte-之间的转换" class="headerlink" title="String与byte[]之间的转换"></a>String与byte[]之间的转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br></pre></td></tr></table></figure><h2 id="StringBuilder类和StringBuffer类"><a href="#StringBuilder类和StringBuffer类" class="headerlink" title="StringBuilder类和StringBuffer类"></a>StringBuilder类和StringBuffer类</h2><p>String、StringBuilder和StringBuffer的异同？</p><ul><li>String：不可变的字符序列；底层使用char数组存储</li><li>StringBuilder：可变的字符序列；线程不安全，效率高；底层使用char数组存储</li><li>StringBuffer：可变的字符序列；线程安全，效率偏低；底层使用char数组存储</li></ul><h3 id="Stringbuilder类的使用（StringBuffer相同）"><a href="#Stringbuilder类的使用（StringBuffer相同）" class="headerlink" title="Stringbuilder类的使用（StringBuffer相同）"></a>Stringbuilder类的使用（StringBuffer相同）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(string);</span><br><span class="line">s.append(str);</span><br><span class="line">s.delete(start, end);<span class="comment">//删除[start,end)的内容</span></span><br><span class="line">s.replace(start, end, replacement);<span class="comment">//替换[start,end)的内容</span></span><br><span class="line">s.insert(offset, string);<span class="comment">//在offset处插入字符串</span></span><br><span class="line">s.reverse();</span><br><span class="line">s.indexof(string);<span class="comment">//string第一次出现的位置</span></span><br><span class="line">s.substring(start, end);<span class="comment">//返回[start,end)的子字符串</span></span><br><span class="line">s.length();</span><br><span class="line">s.charAt(index);</span><br><span class="line">s.setCharAt(index, ch);</span><br></pre></td></tr></table></figure><h2 id="时间日期相关API"><a href="#时间日期相关API" class="headerlink" title="时间日期相关API"></a>时间日期相关API</h2><h3 id="常用LocalDateTime和DateTimeFormatter"><a href="#常用LocalDateTime和DateTimeFormatter" class="headerlink" title="常用LocalDateTime和DateTimeFormatter"></a>常用LocalDateTime和DateTimeFormatter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(year, month, day, hour, minute, second);</span><br><span class="line"><span class="comment">//getXxx()</span></span><br><span class="line">localDateTime.getDayOfMonth();</span><br><span class="line"><span class="comment">//withXxx()修改日期时间</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime1</span> <span class="operator">=</span> localDateTime.withDayOfMonth(day);</span><br><span class="line"><span class="comment">//plus()</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> localDateTime.plusMonths(months);</span><br><span class="line"><span class="comment">//格式化</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">format3</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> format3.format(localDateTime);</span><br><span class="line">System.out.println(str3);</span><br></pre></td></tr></table></figure><h3 id="System获取时间戳"><a href="#System获取时间戳" class="headerlink" title="System获取时间戳"></a>System获取时间戳</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currnetTimeMillis();</span><br><span class="line"><span class="comment">//代码块</span></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currnetTimeMillis();</span><br><span class="line">System.out.println(end - start);</span><br></pre></td></tr></table></figure><h3 id="java-util-Date"><a href="#java-util-Date" class="headerlink" title="java.util.Date"></a>java.util.Date</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建了当前时间对应的Date对象</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//显示当前的年月日时分秒</span></span><br><span class="line">System.out.println(date.toString());</span><br><span class="line"><span class="comment">//返回从1970.1.1 0:0:0到现在的毫秒数</span></span><br><span class="line">System.out.println(date.getTime());</span><br><span class="line"><span class="comment">//传入从1970.1.1 0:0:0到现在的毫秒数</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1828726L</span>);</span><br><span class="line">System.out.println(date1.toString());</span><br></pre></td></tr></table></figure><h3 id="java-sql-Date"><a href="#java-sql-Date" class="headerlink" title="java.sql.Date"></a>java.sql.Date</h3><p>对应数据库中的日期类型的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入从1970.1.1 0:0:0到现在的毫秒数</span></span><br><span class="line">java.sql.<span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="number">769869786876L</span>);</span><br><span class="line"><span class="comment">//显示当前的年月日时分秒</span></span><br><span class="line">System.out.println(date2.toString());</span><br><span class="line"><span class="comment">//如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">java.sql.<span class="type">Date</span> <span class="variable">date4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(date3.getTime());</span><br></pre></td></tr></table></figure><h3 id="SimpleDateFormat类"><a href="#SimpleDateFormat类" class="headerlink" title="SimpleDateFormat类"></a>SimpleDateFormat类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用默认的构造器实例化</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>();</span><br><span class="line"><span class="comment">//格式化：日期=&gt;字符串</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">System.out.println(format);</span><br><span class="line"><span class="comment">//解析：字符串=&gt;日期</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;22-09-01 下午12:13&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> sdf.parse(str);</span><br><span class="line">System.out.println(date1);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用传入pattern的构造器实例化</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//格式化：日期=&gt;字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">System.out.println(format);</span><br><span class="line"><span class="comment">//解析：字符串=&gt;日期</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2022-09-01 12:13:00&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> sdf.parse(str);</span><br><span class="line">System.out.println(date1);</span><br></pre></td></tr></table></figure><h3 id="Calender类"><a href="#Calender类" class="headerlink" title="Calender类"></a>Calender类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="comment">//方式一：创建子类对象（GregorianCalender）</span></span><br><span class="line"><span class="comment">//方式二：调用其静态方法getInstance</span></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line"><span class="comment">//get()</span></span><br><span class="line"><span class="type">inr</span> <span class="variable">days</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"><span class="comment">//set()</span></span><br><span class="line">calendar.set(Calendar.DAY_OF_MONTH, <span class="number">23</span>);</span><br><span class="line"><span class="comment">//add()</span></span><br><span class="line">calendar.add(Calendar.DAY_OF_MONTH, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//getTime()：日历类=&gt;Date对象</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line"><span class="comment">//setTime()：Date对象=&gt;日历类</span></span><br><span class="line">calendar.setTime(date);</span><br></pre></td></tr></table></figure><h3 id="LocalDate-x2F-LocalTime-x2F-LocalDateTime"><a href="#LocalDate-x2F-LocalTime-x2F-LocalDateTime" class="headerlink" title="LocalDate&#x2F;LocalTime&#x2F;LocalDateTime"></a>LocalDate&#x2F;LocalTime&#x2F;LocalDateTime</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(year, month, day, hour, minute, second);</span><br><span class="line"><span class="comment">//getXxx()</span></span><br><span class="line">localDateTime.getDayOfMonth();</span><br><span class="line"><span class="comment">//withXxx()修改日期时间</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime1</span> <span class="operator">=</span> localDateTime.withDayOfMonth(day);</span><br><span class="line"><span class="comment">//plus()</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> localDateTime.plusMonths(months);</span><br></pre></td></tr></table></figure><h3 id="Instant类"><a href="#Instant类" class="headerlink" title="Instant类"></a>Instant类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取本初子午线对应的标准时间</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"><span class="comment">//添加时间的偏移量</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line"><span class="comment">//获取从1970.1.1 0:0:0开始的毫秒数</span></span><br><span class="line"><span class="type">long</span> <span class="variable">milli</span> <span class="operator">=</span> instant.toEpochMilli();</span><br><span class="line"><span class="comment">//通过给定的毫秒数获取Instant实例</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.ofEpochMilli(milli);</span><br></pre></td></tr></table></figure><h3 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h3><p>格式化或者解析日期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">me.now();</span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">isoLocalDateTime</span> <span class="operator">=</span> DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class="line"><span class="comment">//日期=&gt;字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">format1</span> <span class="operator">=</span> isoLocalDateTime.format(now);</span><br><span class="line">System.out.println(now);</span><br><span class="line">System.out.println(format1);</span><br><span class="line"><span class="comment">//字符串=&gt;日期</span></span><br><span class="line"><span class="type">TemporalAccessor</span> <span class="variable">parse</span> <span class="operator">=</span> isoLocalDateTime.parse(format1);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">format2</span> <span class="operator">=</span> DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);</span><br><span class="line"><span class="comment">//日期=&gt;字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> format2.format(now);</span><br><span class="line">System.out.println(str2);<span class="comment">//2022年4月3日 下午05时06分25秒</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">format3</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> format3.format(now);</span><br><span class="line">System.out.println(str3);</span><br></pre></td></tr></table></figure><h2 id="Java比较器"><a href="#Java比较器" class="headerlink" title="Java比较器"></a>Java比较器</h2><p>对多个对象排序需要比较对象的大小</p><h3 id="Comparable接口的使用"><a href="#Comparable接口的使用" class="headerlink" title="Comparable接口的使用"></a>Comparable接口的使用</h3><ul><li>像String类、包装类等实现了Comparable接口，重写了compareTo()方法</li><li>重写compareTo(obj)的规则：<ul><li>如果当前对象this大于形参对象obj，则返回正整数</li><li>如果当前对象this小于形参对象obj，则返回负整数</li><li>如果当前对象this等于形参对象obj，则返回零</li></ul></li><li>对于自定义类，如果需要排序，可以让自定义类实现Comparable接口，重写compareTo方法</li></ul><h3 id="Comparator接口的使用"><a href="#Comparator接口的使用" class="headerlink" title="Comparator接口的使用"></a>Comparator接口的使用</h3><ul><li>当元素的类型没有实现Comparable接口而又不方便修改代码，或者实现了Comparable接口的排序规则不适合当前操作，那么可以考虑使用Comparator的对象来排序</li><li>重写compare(Object o1, Object o2)方法，比较o1和o2的大小：<ul><li>如果方法返回正整数，则表示o1大于o2</li><li>如果方法返回负整数，则表示o1小于o2</li><li>如果方法返回零，则表示o1等于o2</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collections.sort(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(), <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System-x2F-BigInteger-x2F-BigDecimal"><a href="#System-x2F-BigInteger-x2F-BigDecimal" class="headerlink" title="System&#x2F;BigInteger&#x2F;BigDecimal"></a>System&#x2F;BigInteger&#x2F;BigDecimal</h2><h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><ul><li>类的对象是有限个，确定的</li><li>当需要定义一组常量时，使用枚举类</li><li>枚举类只有一个对象，则可以作为单例模式的实现方式</li></ul><h2 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seaonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Seaon</span><span class="params">(String sName, String sDesc)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.seaonName = sName;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = sDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeasonTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> Season.Spring;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用enum定义枚举类"><a href="#使用enum定义枚举类" class="headerlink" title="使用enum定义枚举类"></a>使用enum定义枚举类</h2><ul><li>定义的枚举类默认继承于java.lang.Enum类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeasonTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">summer</span> <span class="operator">=</span> Season.SUMMER;</span><br><span class="line">        System.out.println(summer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seaonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String sName, String sDesc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.seaonName = sName;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = sDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeaonName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seaonName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Enum类的常用方法"><a href="#Enum类的常用方法" class="headerlink" title="Enum类的常用方法"></a>Enum类的常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回枚举对象数组</span></span><br><span class="line">Season[] values = Season.values();</span><br><span class="line"><span class="comment">//根据提供的字符串，返回与字符串同名的枚举对象</span></span><br><span class="line"><span class="type">Season</span> <span class="variable">winter</span> <span class="operator">=</span> Season.valueOf(<span class="string">&quot;WINTER&quot;</span>);</span><br><span class="line"><span class="comment">//返回常量名</span></span><br><span class="line">summer.toString();</span><br></pre></td></tr></table></figure><h2 id="使用enum关键字定义的枚举类实现接口"><a href="#使用enum关键字定义的枚举类实现接口" class="headerlink" title="使用enum关键字定义的枚举类实现接口"></a>使用enum关键字定义的枚举类实现接口</h2><ul><li>实现接口，在enum类中实现抽象方法</li><li>让枚举类中的对象分别实现接口中的抽象方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span> <span class="keyword">implements</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;夏日炎炎&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;秋高气爽&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;冰天雪地&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seaonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String sName, String sDesc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.seaonName = sName;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = sDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeaonName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seaonName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li>定义注解使用@interface</li><li>成员变量声明为无参数方法，方法名为成员名字，返回类型为成员类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;hey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(value = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本元注解的使用"><a href="#基本元注解的使用" class="headerlink" title="基本元注解的使用"></a>基本元注解的使用</h2><p>元注解：注解的注解，用来修饰注解</p><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>用于指定Annotation的生命周期，包含一个RetentionPolicy类型的成员变量</p><ul><li>RetentionPolicy.SOURCE 在源文件中有效（即源文件保留），编译器直接丢弃使用这种策略的注释</li><li>RetentionPolicy.CLASS 在class文件中有效（即class保留），当运行Java程序时，JVM不会保留注释，这是默认值</li><li>RetentionPolicy.RUNTIME 在运行时有效（即运行时保留），当运行Java程序时，JVM会保留注释，程序可以通过反射获取该注释</li></ul><h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><p>用于指定Annotation能修饰什么程序元素，包含ElementType类型对象，例如TYPE、FIELD、METHOD等等</p><h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><p>提示该注解将被文档提取，默认情况下，javadoc是不包括注解的</p><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><p>某个类使用了被Inherited修饰的Annotation，子类也继承了此Annotation</p><h2 id="可重复注解"><a href="#可重复注解" class="headerlink" title="可重复注解"></a>可重复注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotations &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repeatable(MyAnnotation.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;hey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@MyAnnotation(value = &quot;hi&quot;)</span>;</span><br><span class="line"><span class="meta">@MyAnnotation(value = &quot;hello&quot;)</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解修饰泛型</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE_PARAMETER&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;hey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Generic</span>&lt;<span class="meta">@MyAnnotation</span> T&gt;&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解修饰类型</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE_USE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;hey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> <span class="keyword">throws</span> <span class="meta">@MyAnnotation</span> RuntimeException&#123;</span><br><span class="line">        List&lt;<span class="meta">@MyAnnotation</span> String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">collection.add(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">collection.add(<span class="number">123</span>);</span><br><span class="line">collection.add(LocalDateTime.now());</span><br><span class="line">System.out.println(collection.size());</span><br><span class="line"></span><br><span class="line"><span class="type">Collection</span> <span class="variable">collection1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">collection.add(<span class="string">&quot;DEF&quot;</span>);</span><br><span class="line">collection.add(<span class="number">456</span>);</span><br><span class="line">collection.addAll(collection1);</span><br><span class="line">System.out.println(collection);</span><br><span class="line"></span><br><span class="line">collection.clear();</span><br><span class="line">System.out.println(collection.isEmpty());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(collection.contains(<span class="string">&quot;DEF&quot;</span>));</span><br><span class="line">System.out.println(collection.containsAll(collection));</span><br><span class="line"></span><br><span class="line">collection.remove(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">System.out.println(collection);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取差集</span></span><br><span class="line"><span class="type">Collection</span> <span class="variable">collection2</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;A&quot;</span>,<span class="number">123</span>);</span><br><span class="line">collection.removeAll(collection2);</span><br><span class="line">System.out.println(collection);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取交集</span></span><br><span class="line"><span class="type">Collection</span> <span class="variable">collection3</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;DEF&quot;</span>,<span class="number">789</span>);</span><br><span class="line">collection.retainAll(collection3);</span><br><span class="line">System.out.println(collection);</span><br><span class="line"></span><br><span class="line"><span class="type">Collection</span> <span class="variable">collection4</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line"><span class="type">Collection</span> <span class="variable">collection5</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">System.out.println(collection4.equals(collection5));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(collection.hashCode());</span><br><span class="line"></span><br><span class="line"><span class="comment">//集合=&gt;数组</span></span><br><span class="line">Object[] arr = collection.toArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数组=&gt;集合</span></span><br><span class="line"><span class="type">Collection</span> <span class="variable">collection6</span> <span class="operator">=</span> Arrays.asList(arr);</span><br><span class="line">System.out.println(collection6);</span><br></pre></td></tr></table></figure><h3 id="使用Iterator遍历Collection"><a href="#使用Iterator遍历Collection" class="headerlink" title="使用Iterator遍历Collection"></a>使用Iterator遍历Collection</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    <span class="comment">//next()指针下移，将下移以后集合位置上的元素返回</span></span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;ABC&quot;</span>.equals(obj))&#123;</span><br><span class="line">        <span class="comment">//进行remove()之后，iterator.hasNext()返回false</span></span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach遍历集合或者数组"><a href="#foreach遍历集合或者数组" class="headerlink" title="foreach遍历集合或者数组"></a>foreach遍历集合或者数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object obj : collection)&#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i : arr)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><p>存储有序且可重复的数据</p><p>ArrayList&#x2F;LinkedList&#x2F;Vector的异同</p><p>同：三个类都实现了List接口</p><p>异：</p><ul><li>ArrayList：作为List接口的主要实现类；线程不安全，效率高；底层使用Object[]存储</li><li>LinkedList：底层使用双向链表存储，适用于频繁的插入和删除操作</li><li>Vector：作为List接口的古老实现类；线程安全，效率低；底层使用Object[]存储</li></ul><h4 id="List中的常用方法"><a href="#List中的常用方法" class="headerlink" title="List中的常用方法"></a>List中的常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="number">123</span>);</span><br><span class="line">list.add(<span class="number">456</span>);</span><br><span class="line">list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">list.add(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">1</span>,<span class="string">&quot;asd&quot;</span>);</span><br><span class="line"><span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> Arrays.asList(<span class="number">789</span>, <span class="number">678</span>);</span><br><span class="line">list.addAll(list1);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回列表中首次出现对象的位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> list.indexOf(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="comment">//返回列表中最后一次出现对象的位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> list.lastIndexOf(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="comment">//按照索引删除，返回所删除对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> list.remove(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">list.set(<span class="number">1</span>,<span class="string">&quot;BNM&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//[fromIndex, toIndex)</span></span><br><span class="line"><span class="type">List</span> <span class="variable">subList</span> <span class="operator">=</span> list.subList(<span class="number">1</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>常用方法</p><p>增：add(Object obj)</p><p>删：remove(int index)&#x2F;remove(Object obj)</p><p>改：set(int index, Object ele)</p><p>查：get(int index)</p><p>插：add(int index, Object ele)</p><p>长度：size()</p><p>遍历：①Iterator②foreach</p><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>存储无序且不可重复的数据</p><ul><li>HashSet：作为Set接口的主要实现类；线程不安全；可以存储null值</li><li>LinkedHashSet：作为HashSet的子类，遍历其内部数据可以按照添加的顺序遍历</li><li>TreeSet：可以按照添加的对象的指定属性，进行排序</li></ul><h4 id="Hashset添加元素过程"><a href="#Hashset添加元素过程" class="headerlink" title="Hashset添加元素过程"></a>Hashset添加元素过程</h4><p>向HashSet添加元素a，先调用a的hashCode()计算a的哈希值，通过hash值找到底层数组存储位置，判断数组此位置上是否已经有元素，如果此位置没有其他元素，则a添加成功，如果此位置上有其他元素b（或以链表形式存在），则比较元素a与元素b的hash值，则元素a添加成功，如果hash值不同，则调用元素a的equals()，equals返回true，元素a添加失败，equals返回false，则元素a添加成功</p><p>JDK7 添加元素a采取头插法，JDK8 添加元素a采取尾插法</p><h4 id="重写hashCode-和equals"><a href="#重写hashCode-和equals" class="headerlink" title="重写hashCode()和equals()"></a>重写hashCode()和equals()</h4><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><ul><li>作为HashSet的子类，在添加数据的同时，每个数据维护两个引用，记录此数据的前一个数据和后一个数据</li><li>适用于频繁遍历的操作</li></ul><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><ul><li><p>添加的对象属于同一类</p></li><li><p>两种排序方式：自然排序 和 定制排序</p><ul><li><p>所排序对象的类实现Comparable接口</p></li><li><p>使用Comparator接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TreeSet</span> <span class="variable">treeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p><strong>HashMap</strong>：作为Map的主要实现类；线程不安全，效率高；存储null的key和value</p><p><strong>LinkedHashMap</strong>：保证在遍历map元素时，可以按照添加顺序实现遍历，原因是在原有的HashMap底层结构基础上添加了一对指针，指向前一个和后一个结点，适用于频繁的遍历操作</p><p><strong>TreeMap</strong>：保证按照添加的key-value进行排序，实现排序遍历，特指按照key来进行排序</p><p><strong>Hashtable</strong>：作为古老的实现类；线程安全的，效率低；不能存储null的key和value</p><p><strong>Properties</strong>：常用来处理配置文件，key和value都是String类型</p><p>HashMap的底层：数组+链表（jdk7以及之前）数组+链表+红黑树（jdk8）</p><p>Map中key使用Set进行存储，value使用Collection存储，entry使用Set存储</p><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;B&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;123&quot;</span>,<span class="string">&quot;BC&quot;</span>);</span><br><span class="line">map.put(<span class="number">12</span>,<span class="string">&quot;AB&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>,<span class="string">&quot;C&quot;</span>);</span><br><span class="line">System.out.println(map);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map1.put(LocalDateTime.now(),<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">map1.put(<span class="number">1</span>,<span class="string">&quot;asw&quot;</span>);</span><br><span class="line"></span><br><span class="line">map.putAll(map1);</span><br><span class="line">System.out.println(map);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>  map.remove(<span class="number">1</span>);</span><br><span class="line">System.out.println(map);</span><br><span class="line"></span><br><span class="line">map.clear();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(map.get(<span class="string">&quot;AA&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(map.containsKey(<span class="number">12</span>));</span><br><span class="line">System.out.println(map.containsValue(<span class="string">&quot;C&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(map.size());</span><br><span class="line">System.out.println(map.isEmpty());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> map.keySet();</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> keys.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> values.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">    System.out.println(iterator1.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Set</span> <span class="variable">entries</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> entries.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) iterator2.next();</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;:&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用方法</p><p>增：put(Object key, Object value)</p><p>删：remove(Object key)</p><p>改：put(Object key, Object value)</p><p>查：get(Object key)</p><p>长度：size()</p><p>遍历：keySet()&#x2F;values()&#x2F;entrySet()</p><h4 id="TreeMap的两种添加方式"><a href="#TreeMap的两种添加方式" class="headerlink" title="TreeMap的两种添加方式"></a>TreeMap的两种添加方式</h4><ul><li><p>所添加对象实现Comparable接口</p></li><li><p>提供Comparator实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TreeMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">pros.load(fis);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span>pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure><h4 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h4><p>Collections可以操纵List、Set和Map</p><p>reverse(list) 反转list中元素的顺序</p><p>shuffle(list) 对list集合元素进行随机排序</p><p>sort(list) 排序</p><p>sort(list, comparator) 排序</p><p>swap(list, int, int)</p><p>Object max(collection)</p><p>Object max(collection,comparator)</p><p>Object min(collection)</p><p>Object min(collection,comparator)</p><p>int frequency(collection, object) 返回object出现了几次</p><p>void copy(List dest, List src) 注：dest.size() &gt;&#x3D; src.size()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; dest = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">3</span>]));</span><br><span class="line">List&lt;Integer&gt; src = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;));</span><br><span class="line">Collections.copy(dest, src);</span><br><span class="line">System.out.println(dest);<span class="comment">//[1, 2, null]</span></span><br></pre></td></tr></table></figure><p>boolean replaceAll(List list, Object oldVal, Object newVal)</p><p>synchronizedXxx()方法可以将指定集合包装成线程同步的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> Collections.synchronizedList(list);</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="自定义泛型结构"><a href="#自定义泛型结构" class="headerlink" title="自定义泛型结构"></a>自定义泛型结构</h2><p>泛型类和泛型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span>&lt;T&gt; &#123;</span><br><span class="line">    T orderT;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">(T orderT)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">copyFromArrayToList</span><span class="params">(E[] arr)</span> &#123;</span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(arr);</span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通配符的使用"><a href="#通配符的使用" class="headerlink" title="通配符的使用"></a>通配符的使用</h2><ul><li><p>通配符：?</p></li><li><p>类A是类B的父类，G&lt;A&gt;和没有关系G&lt;B&gt;没有关系，二者共同的父类是G&lt;?&gt;</p></li><li><p>List&lt;?&gt; list限制写入数据，只能加null，允许读取数据，返回类型是Object类型</p></li><li><p>有限制条件的通配符的使用</p><ul><li>? extends A : G&lt;? extends A&gt; 可以作为G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的子类，可以读取数据，返回A类型对象，不能写入数据</li><li>? super A : G&lt;? super A&gt; 可以作为G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的父类，可以读取数据，返回Object类型对象，能够写入A类型以及A类型子类的对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">List&lt;String&gt; list2 = <span class="literal">null</span>;</span><br><span class="line">List&lt;?&gt; list = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">list = list1;</span><br><span class="line">list = list2;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(List&lt;?&gt; list)</span>&#123;</span><br><span class="line">    iterator&lt;?&gt; iterator = list.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">List&lt;? <span class="built_in">super</span> Person&gt; list2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; list3 = <span class="literal">null</span>;</span><br><span class="line">List&lt;Person&gt; list4 = <span class="literal">null</span>;</span><br><span class="line">List&lt;Object&gt; list5 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">list1 = list2;</span><br><span class="line">list1 = list3;</span><br><span class="line"><span class="comment">//list1 = list5;编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//list2 = list2;编译不通过</span></span><br><span class="line">list2 = list3;</span><br><span class="line">list2 = list5;</span><br></pre></td></tr></table></figure><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><ul><li><p>根据数据单位分为：字节流（8bit）和字符流（16bit）</p></li><li><p>根据数据流的流向分为：输入流和输出流，从硬盘到内存即输入流，从内存到硬盘即输出流</p></li><li><p>根据流的角色分为：节点流和处理流，节点流连接硬盘到内存，处理流就是在节点流上包一层</p></li></ul><table><thead><tr><th align="center">抽象基类</th><th align="center">字节流</th><th align="center">字符流</th></tr></thead><tbody><tr><td align="center">输入流</td><td align="center">InputStream</td><td align="center">Reader</td></tr><tr><td align="center">输出流</td><td align="center">OutputStream</td><td align="center">Writer</td></tr></tbody></table><table><thead><tr><th align="center">抽象基类</th><th align="center">节点流（或文件流）</th><th align="center">缓冲流（处理流的一种）</th></tr></thead><tbody><tr><td align="center">InputStream</td><td align="center">FileInputStream</td><td align="center">BufferedInputStream</td></tr><tr><td align="center">OutputStream</td><td align="center">FileOutputStream</td><td align="center">BufferedOutputStream</td></tr><tr><td align="center">Reader</td><td align="center">FileReader</td><td align="center">BufferedReader</td></tr><tr><td align="center">Writer</td><td align="center">FileWriter</td><td align="center">BufferedWriter</td></tr></tbody></table><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>File类可以表示文件或者文件目录（即文件夹）</p><h3 id="创建File类的实例"><a href="#创建File类的实例" class="headerlink" title="创建File类的实例"></a>创建File类的实例</h3><ul><li><p>File(String filePath)</p></li><li><p>File(String parentPath, String childPath)</p></li><li><p>路径分隔符，windows下：\\，unix：&#x2F;</p></li><li><p>创建File类实例之后，实例暂时只存在于内存里</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相对路径，在当前module下</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"><span class="comment">//绝对路径，从盘符开始写</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IdeaProjects\\JavaSenior\\day02\\he.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(file);</span><br><span class="line">System.out.println(file0);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数是parentPath，表示父目录，第二个参数是childPath，表示子目录/子文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IdeaProjects&quot;</span>, <span class="string">&quot;JavaSenior&quot;</span>);</span><br><span class="line">System.out.println(file1);</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file1, <span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line">System.out.println(file2);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">System.out.println(file.getAbsolutePath());</span><br><span class="line"><span class="comment">//D:\IdeaProjects\JavaSenior\day02\hello.txt</span></span><br><span class="line">System.out.println(file.getName());</span><br><span class="line"><span class="comment">//hello.txt</span></span><br><span class="line">System.out.println(file.getParent());</span><br><span class="line"><span class="comment">//null</span></span><br><span class="line">System.out.println(file.length());</span><br><span class="line"><span class="comment">//10</span></span><br><span class="line">System.out.println(file.lastModified());</span><br><span class="line"><span class="comment">//1649343931477毫秒</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IdeaProjects\\JavaSenior&quot;</span>);</span><br><span class="line">String[] list = file.list();</span><br><span class="line"><span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File[] files = file.listFiles();</span><br><span class="line"><span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\test\\hi.txt&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">renameTo方法如果想要返回true，需要保证file1在硬盘中是存在的</span></span><br><span class="line"><span class="comment">且file2不能在硬盘中存在</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">renameTo</span> <span class="operator">=</span> file1.renameTo(file2);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\hi.txt&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public boolean renameTo(dest)将文件重命名为指定文件路径</span></span><br><span class="line"><span class="comment">renameTo方法如果想要返回true，需要保证file1在硬盘中是存在的</span></span><br><span class="line"><span class="comment">且file2不能在硬盘中存在</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">renameTo</span> <span class="operator">=</span> file1.renameTo(file2);</span><br><span class="line">System.out.println(renameTo);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;Hello.txt&quot;</span>);</span><br><span class="line">System.out.println(file1.isDirectory());</span><br><span class="line">System.out.println(file1.isFile());</span><br><span class="line">System.out.println(file1.exists());</span><br><span class="line">System.out.println(file1.canRead());</span><br><span class="line">System.out.println(file1.canWrite());</span><br><span class="line">System.out.println(file1.isHidden());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\temp\\io\\io1&quot;</span>);</span><br><span class="line"><span class="comment">//创建文件目录</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">mkdir</span> <span class="operator">=</span> file.mkdir();</span><br><span class="line">System.out.println(mkdir);</span><br><span class="line"><span class="comment">//false，因为文件路径中的temp和io不存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">mkdirs</span> <span class="operator">=</span> file.mkdirs();</span><br><span class="line">System.out.println(mkdirs);</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//mkdir和mkdirs的区别在于，后者会自动创建缺省目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//要想删除成功，io1下不能有子目录或文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\temp\\io\\io1&quot;</span>);</span><br><span class="line">System.out.println(file1.delete());</span><br></pre></td></tr></table></figure><ul><li>文件的获取和写入需要通过IO流实现</li><li>IO的构造器需要传入对应的File对象</li></ul><h2 id="FileReader读入数据的操作"><a href="#FileReader读入数据的操作" class="headerlink" title="FileReader读入数据的操作"></a>FileReader读入数据的操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line"><span class="comment">//read()返回读入的一个字符，如果达到文件末尾，返回-1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> fr.read();</span><br><span class="line"><span class="keyword">while</span> (data != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.print((<span class="type">char</span>) data);</span><br><span class="line">    data = fr.read();</span><br><span class="line">&#125;</span><br><span class="line">fr.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为了保证流资源一定可以执行关闭操作</span></span><br><span class="line"><span class="comment">需要使用try-catch-finally处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">    fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">while</span> ((data = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println((<span class="type">char</span>) data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fr != <span class="literal">null</span>)</span><br><span class="line">            fr.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line"><span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="comment">//read(char[] cbuf)返回每次读入cbuf数组中的字符的个数</span></span><br><span class="line"><span class="comment">//如果达到文件末尾，那么返回-1</span></span><br><span class="line"><span class="keyword">while</span> ((len = fr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(cbuf, <span class="number">0</span>, len);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">fr.close();<span class="comment">//输入输出流、数据库连接和网络连接如果不关闭，垃圾收集器不会回收</span></span><br></pre></td></tr></table></figure><h2 id="FileWriter写出数据的操作"><a href="#FileWriter写出数据的操作" class="headerlink" title="FileWriter写出数据的操作"></a>FileWriter写出数据的操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">文件不存在，将会自动创建</span></span><br><span class="line"><span class="comment">文件存在，append参数为false（或者没填）,写入内容覆盖了相应文件</span></span><br><span class="line"><span class="comment">文件存在，append参数为true，写入文件追加在相应文件之后</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file,<span class="literal">true</span>);</span><br><span class="line">fw.write(<span class="string">&quot;i have a dream&quot;</span>);</span><br><span class="line">fw.close();</span><br></pre></td></tr></table></figure><h2 id="使用FileReader和FileWriter实现文本文件的复制"><a href="#使用FileReader和FileWriter实现文本文件的复制" class="headerlink" title="使用FileReader和FileWriter实现文本文件的复制"></a>使用FileReader和FileWriter实现文本文件的复制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello2.txt&quot;</span>);</span><br><span class="line">    fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(srcFile);</span><br><span class="line">    fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(destFile, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> len;<span class="comment">//记录读入到cbuf数组的字符个数</span></span><br><span class="line">    <span class="keyword">while</span> ((len = fr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        fw.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fr != <span class="literal">null</span>)</span><br><span class="line">            fr.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fw != <span class="literal">null</span>)</span><br><span class="line">            fw.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>字符流不能处理图片文件</p></li><li><p>字节流不能处理文本文件，可能出现乱码</p></li><li><p>对于文本文件（.txt&#x2F;.java&#x2F;.c&#x2F;.cpp），使用字符流处理</p></li><li><p>对于非文本文件（.jpg&#x2F;.mp3&#x2F;.avi&#x2F;.doc&#x2F;.ppt），使用字节流处理</p></li></ul><h2 id="使用FileInputStream和FileOutputStream读写非文本文件"><a href="#使用FileInputStream和FileOutputStream读写非文本文件" class="headerlink" title="使用FileInputStream和FileOutputStream读写非文本文件"></a>使用FileInputStream和FileOutputStream读写非文本文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;image.jpg&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;image1.jpg&quot;</span>);</span><br><span class="line">    fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src);</span><br><span class="line">    fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dest, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = fis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        fos.write(buff, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fis != <span class="literal">null</span>)</span><br><span class="line">            fis.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fos != <span class="literal">null</span>)</span><br><span class="line">            fos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓冲流（字节型）实现非文本文件的复制"><a href="#缓冲流（字节型）实现非文本文件的复制" class="headerlink" title="缓冲流（字节型）实现非文本文件的复制"></a>缓冲流（字节型）实现非文本文件的复制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;image.jpg&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;image3.jpg&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src);</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dest);</span><br><span class="line">    bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">    bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = bis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bos != <span class="literal">null</span>)</span><br><span class="line">            bos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bis != <span class="literal">null</span>)</span><br><span class="line">            bis.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭外层流时，内层流会自动关闭</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br></pre></td></tr></table></figure><h2 id="缓冲流（字节型）实现非文本文件的复制-1"><a href="#缓冲流（字节型）实现非文本文件的复制-1" class="headerlink" title="缓冲流（字节型）实现非文本文件的复制"></a>缓冲流（字节型）实现非文本文件的复制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>)));</span><br><span class="line">    bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello3.txt&quot;</span>)));</span><br><span class="line">    String data;</span><br><span class="line">    <span class="keyword">while</span>((data=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">        bw.write(data);<span class="comment">//write()方法不包括换行符</span></span><br><span class="line">        bw.newLine();<span class="comment">//提供换行的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (br != <span class="literal">null</span>)</span><br><span class="line">            br.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bw != <span class="literal">null</span>)</span><br><span class="line">            bw.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>字节流与字符流之间转换</p><p>InputStreamReader 字节输入流转换成字符输入流</p><p>OutputStreamWriter 字符输出流转换为字节输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis);</span><br><span class="line"><span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = isr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(cbuf, <span class="number">0</span>, len);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">isr.close();</span><br></pre></td></tr></table></figure><h2 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h2><p>System.in 标准的输入流，默认从键盘输入</p><p>System.out 标准的输出流，默认从控制台输出</p><p>System类的setIn(InputStream is)&#x2F;setout(PrintStream ps)重新输入输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in);</span><br><span class="line">    br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">    String data;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        data = br.readLine();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;e&quot;</span>.equalsIgnoreCase(data) || <span class="string">&quot;exit&quot;</span>.equalsIgnoreCase(data)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data = data.toUpperCase();</span><br><span class="line">        System.out.println(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (br != <span class="literal">null</span>)</span><br><span class="line">            br.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p>PrintStream&#x2F;PrintWriter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">    ps = <span class="keyword">new</span> <span class="title class_">PrintStream</span>(fos, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.setOut(ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</span><br><span class="line">        ps.print((<span class="type">char</span>) i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ps!=<span class="literal">null</span>)</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>DataInputStream&#x2F;DataOutputStream</p><p>操作Java基本数据类型和String类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">dos.writeUTF(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">dos.writeInt(<span class="number">123</span>);</span><br><span class="line">dos.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">dos.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">bool</span> <span class="operator">=</span> dis.readBoolean();</span><br><span class="line">System.out.println(str+num+bool);</span><br></pre></td></tr></table></figure><h2 id="对象序号化机制"><a href="#对象序号化机制" class="headerlink" title="对象序号化机制"></a>对象序号化机制</h2><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><p>存储和读取基本数据类型和对象</p><p>ObjectInputStream用来保存基本数据和对象，序列化</p><p>ObjectOutputStream用来读取基本数据类型或对象，反序列化</p><p>ObjectInputStream&#x2F;ObjectOutputStream不能序列化static和transient修饰的成员变量</p><h3 id="对象流序列化和反序列化"><a href="#对象流序列化和反序列化" class="headerlink" title="对象流序列化和反序列化"></a>对象流序列化和反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">oos.writeObject(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;你好世界&quot;</span>));</span><br><span class="line">oos.flush();</span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) o;</span><br><span class="line">System.out.println(str);</span><br><span class="line">ois.close();</span><br></pre></td></tr></table></figure><h3 id="自定义类序列化和反序列化"><a href="#自定义类序列化和反序列化" class="headerlink" title="自定义类序列化和反序列化"></a>自定义类序列化和反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">9879079L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">oos.writeObject(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;abc&quot;</span>, <span class="number">12</span>));</span><br><span class="line">oos.flush();</span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) ois.readObject();</span><br><span class="line">System.out.println(p);</span><br><span class="line">ois.close();</span><br></pre></td></tr></table></figure><ul><li>可序列化类需要实现接口Serializable</li><li>序列化后的对象需要进行反序列化，则根据序列化对象的serialVersionUID去寻找serialVersionUID一致的类进行解析</li><li>除了当前类需要需要实现接口Serializable之外，还必须保证其内部所有属性可序列化，基本数据类型可序列化</li></ul><h2 id="随机存取文件流"><a href="#随机存取文件流" class="headerlink" title="随机存取文件流"></a>随机存取文件流</h2><p>RandomAccessFile类</p><ul><li>实现了DataInput和DataOutput接口哦</li><li>程序可以直接跳到文件任意地方读写文件</li><li>RandomAccessFile对象包含一个记录指针，标识当前读写的位置<ul><li>long getFilePointer()</li><li>void seek(long pos)：移动文件记录指针到pos位置</li></ul></li></ul><h3 id="实现数据读写操作"><a href="#实现数据读写操作" class="headerlink" title="实现数据读写操作"></a>实现数据读写操作</h3><p>创建RandomAccessFile需要指定mode，mode有四种：</p><ul><li>r：只读</li><li>rw：可读写</li><li>rwd：可读写；同步文件内容更新，rw写入数据不会立即写入硬盘，rwd一旦写入数据就会同步到硬盘中</li><li>rws：可读写；同步文件内容和元数据更新</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">raf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;image.jpg&quot;</span>), <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">raf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;image1.jpg&quot;</span>), <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = raf1.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    raf2.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">raf1.close();</span><br><span class="line">raf2.close();</span><br></pre></td></tr></table></figure><p>如果RandomAccessFile作为输出流，写出到的文件如果不存在，则在执行过程中自动创建，写出到的文件如果存在，则对原文件内容进行覆盖，默认从头覆盖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">raf.write(<span class="string">&quot;xyz&quot;</span>.getBytes());<span class="comment">//覆盖数据</span></span><br><span class="line">raf.close();</span><br></pre></td></tr></table></figure><h3 id="实现数据插入"><a href="#实现数据插入" class="headerlink" title="实现数据插入"></a>实现数据插入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">raf.seek(<span class="number">3</span>);<span class="comment">//将指针移动到角标为3的位置</span></span><br><span class="line"><span class="comment">//保存指针3以后的所有数据到StringBuilder中</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>((<span class="type">int</span>) <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>).length());</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = raf.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    builder.append(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len));</span><br><span class="line">&#125;</span><br><span class="line">raf.seek(<span class="number">3</span>);</span><br><span class="line">raf.write(<span class="string">&quot;xyz&quot;</span>.getBytes());</span><br><span class="line">raf.write(builder.toString().getBytes());</span><br><span class="line">raf.close();</span><br></pre></td></tr></table></figure><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="IP-x2F-InetAddress类"><a href="#IP-x2F-InetAddress类" class="headerlink" title="IP&#x2F;InetAddress类"></a>IP&#x2F;InetAddress类</h2><p>本地回路地址：127.0.0.1 对应的域名：localhost</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">inet1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;192.168.9.8&quot;</span>);</span><br><span class="line">System.out.println(inet1);<span class="comment">// /192.168.9.8</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">inet2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;cn.bing.com&quot;</span>);</span><br><span class="line">System.out.println(inet2);<span class="comment">// cn.bing.com/202.89.233.100</span></span><br><span class="line">System.out.println(inet2.getHostName());<span class="comment">//cn.bing.com</span></span><br><span class="line">System.out.println(inet2.getHostAddress());<span class="comment">//202.89.233.100</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">inet3</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">System.out.println(inet3);</span><br></pre></td></tr></table></figure><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>端口号标识正在计算机上运行的进程</p><p>端口号和IP地址组合得出一个网络套接字：Socket</p><h2 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h2><p>客户端发送内容给服务器，服务器将内容打印到控制台上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPTest1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">client</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//指明服务端IP和端口号</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inet</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(inet, <span class="number">8899</span>);</span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;Hello, I am client&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (os != <span class="literal">null</span>)</span><br><span class="line">                    os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (socket != <span class="literal">null</span>)</span><br><span class="line">                    socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//指明服务器自己的端口号</span></span><br><span class="line">            ss = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8899</span>);</span><br><span class="line">            <span class="comment">//调用accept()接收来自于客户端的socket</span></span><br><span class="line">            socket = ss.accept();</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;from &quot;</span> + socket.getInetAddress().getHostName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (baos != <span class="literal">null</span>)</span><br><span class="line">                    baos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (is != <span class="literal">null</span>)</span><br><span class="line">                    is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (socket != <span class="literal">null</span>)</span><br><span class="line">                    socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ss != <span class="literal">null</span>)</span><br><span class="line">                    ss.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端发送文件给服务端，服务端将文件保存在本地</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8899</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;image.jpg&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8899</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;image_tcp.jpg&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从客户端发送文件给服务端，服务端保存到本地，并返回“发送成功”给客户端，并关闭相应连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPTest3</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8899</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;image.jpg&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">        baos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8899</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;image_tcp1.jpg&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;收到&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sender</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;I am packet through UDP&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] data = str.getBytes();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">inet</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, <span class="number">0</span>, data.length, inet, <span class="number">8899</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiver</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8899</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length);</span><br><span class="line">        socket.receive(packet);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="URL编程"><a href="#URL编程" class="headerlink" title="URL编程"></a>URL编程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/directory/file.dat?username=Tom&quot;</span>);</span><br><span class="line">System.out.println(url.getProtocol());<span class="comment">//http</span></span><br><span class="line">System.out.println(url.getHost());<span class="comment">//localhost</span></span><br><span class="line">System.out.println(url.getPort());<span class="comment">//8080</span></span><br><span class="line">System.out.println(url.getPath());<span class="comment">// /directory/file.dat</span></span><br><span class="line">System.out.println(url.getFile());<span class="comment">// /directory/file.dat?username=Tom</span></span><br><span class="line">System.out.println(url.getQuery());<span class="comment">// username=Tom</span></span><br></pre></td></tr></table></figure><p>实现Tomcat服务端数据下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/directory/file.dat?username=Tom&quot;</span>);</span><br><span class="line"><span class="type">HttpURLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">urlConnection.connect();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;file1.dat&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">fos.close();</span><br><span class="line">is.close();</span><br><span class="line">urlConnection.disconnect();</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射指的是程序在执行的时候，获取类的内部信息，并且直接操作对象的属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;Tom&quot;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) obj;</span><br><span class="line">System.out.println(p);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">age.set(p, <span class="number">10</span>);</span><br><span class="line">System.out.println(p);</span><br><span class="line"></span><br><span class="line"><span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">show.invoke(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射，可以调用Person类的私有结构，比如私有的构造器、方法和属性</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> (Person) constructor1.newInstance(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">System.out.println(p1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用私有属性</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">name.set(p1,<span class="string">&quot;HMM&quot;</span>);</span><br><span class="line">System.out.println(p1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用私有方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">showNation</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;showNation&quot;</span>, String.class);</span><br><span class="line">showNation.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">nation</span> <span class="operator">=</span> (String) showNation.invoke(p1, <span class="string">&quot;Netherland&quot;</span>);</span><br><span class="line">System.out.println(nation);</span><br></pre></td></tr></table></figure><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>类的加载过程：将字节码文件（xxx.class）加载到内存中</p><p>加载到内存中的类，称为运行时类，此运行时的类即Class的一个实例</p><h3 id="获取Class实例"><a href="#获取Class实例" class="headerlink" title="获取Class实例"></a>获取Class实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Person&gt; clazz1 = Person.class;</span><br><span class="line">System.out.println(clazz1);<span class="comment">//class com.stardust.java.Person</span></span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> p1.getClass();</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.stardust.java.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(clazz1 == clazz2);<span class="comment">//true</span></span><br><span class="line">System.out.println(clazz1 == clazz3);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ReflectionTest.class.getClassLoader();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz4</span> <span class="operator">=</span> classLoader.loadClass(<span class="string">&quot;com.stardust.java.Person&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><ul><li><strong>类的加载</strong>：.class文件读入内存，创建一个java.lang.Class对象，此过程由类加载器完成</li><li><strong>类的链接</strong>：将Java类的二进制代码合并到JVM运行状态中<ul><li>验证：确保加载的类信息符合JVM规范</li><li>准备：在方法区中，为类变量分配内存并设置默认值</li><li>解析：虚拟机常量池内符号引用（常量名）替换为直接引用（地址）</li></ul></li><li><strong>类的初始化</strong>：<ul><li>执行类构造器&lt;clinit&gt;()方法（由编译器自动收集类中所有类变量的赋值动作和静态代码块中的语句合并而成），类构造器构造类而不是构造对象</li><li>初始化一个类时，父类还没初始化，先触发父类初始化</li></ul></li></ul><h3 id="ClassLoader类"><a href="#ClassLoader类" class="headerlink" title="ClassLoader类"></a>ClassLoader类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于自定义类，使用系统类加载器进行加载</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line">System.out.println(classLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"><span class="comment">//调用系统类加载器的getParent()，获取扩展类加载器</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader1</span> <span class="operator">=</span> classLoader.getParent();</span><br><span class="line"><span class="comment">//调用扩展类加载器的getParent()，无法获取引导类加载器</span></span><br><span class="line"><span class="comment">//引导类加载器主要负责加载java核心类库，无法加载自定义类</span></span><br><span class="line">System.out.println(classLoader1);<span class="comment">//sun.misc.Launcher$ExtClassLoader@a09ee92</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader2</span> <span class="operator">=</span> classLoader1.getParent();</span><br><span class="line">System.out.println(classLoader2);<span class="comment">//null 无法直接获取</span></span><br></pre></td></tr></table></figure><h3 id="使用ClassLoader加载配置文件"><a href="#使用ClassLoader加载配置文件" class="headerlink" title="使用ClassLoader加载配置文件"></a>使用ClassLoader加载配置文件</h3><p>jdbc.properties文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user=tom</span><br><span class="line">password=xxx</span><br></pre></td></tr></table></figure><p>方式一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//此时的文件默认在当前module下</span></span><br><span class="line">pros.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc.properties&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">System.out.println(user+<span class="string">&quot; &quot;</span>+pwd);</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line"><span class="comment">//配置文件默认识别为当前module的src下</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classLoader.getResourceAsStream(<span class="string">&quot;jdbc1.properties&quot;</span>);</span><br><span class="line">pros.load(is);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">System.out.println(user+<span class="string">&quot; &quot;</span>+pwd);</span><br></pre></td></tr></table></figure><h2 id="根据反射创建对应的运行时类的对象"><a href="#根据反射创建对应的运行时类的对象" class="headerlink" title="根据反射创建对应的运行时类的对象"></a>根据反射创建对应的运行时类的对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"><span class="comment">//newInstance()内部调用了空参构造器</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> clazz.newInstance();</span><br></pre></td></tr></table></figure><h2 id="获取运行时类的属性结构及其内部结构"><a href="#获取运行时类的属性结构及其内部结构" class="headerlink" title="获取运行时类的属性结构及其内部结构"></a>获取运行时类的属性结构及其内部结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="comment">//获取属性结构</span></span><br><span class="line"><span class="comment">//getFields()获取当前运行时类及其所有父类中声明为public访问权限的属性</span></span><br><span class="line">Field[] fields = clazz.getFields();</span><br><span class="line"><span class="keyword">for</span>(Field f : fields)&#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//getDeclaredFields()获取当前运行类中声明的所有属性（不包含父类中声明的属性）</span></span><br><span class="line">Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field f : declaredFields)&#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field f : declaredFields)&#123;</span><br><span class="line">    <span class="comment">//获取权限修饰符</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">modifier</span> <span class="operator">=</span> f.getModifiers();</span><br><span class="line">    System.out.print(Modifier.toString(modifier)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    <span class="comment">//获取数据类型</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">type</span> <span class="operator">=</span> f.getType();</span><br><span class="line">    System.out.print(type.getName()+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    <span class="comment">//获取变量名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> f.getName();</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取运行时类的方法结构及其内部结构"><a href="#获取运行时类的方法结构及其内部结构" class="headerlink" title="获取运行时类的方法结构及其内部结构"></a>获取运行时类的方法结构及其内部结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="comment">//getMethods()获取当前运行类及其所有父类中声明为public权限的方法</span></span><br><span class="line">Method[] methods = clazz.getMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m : methods)&#123;</span><br><span class="line">    System.out.println(m);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//getDeclaredMethods()获取当前运行时类中声明的所有方法（不包含父类中声明的方法）</span></span><br><span class="line">Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m : declaredMethods)&#123;</span><br><span class="line">    System.out.println(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method m : declaredMethods) &#123;</span><br><span class="line">    <span class="comment">//获取方法声明的注解</span></span><br><span class="line">    Annotation[] annotations = m.getAnnotations();</span><br><span class="line">    <span class="keyword">for</span> (Annotation a : annotations) &#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取权限修饰符</span></span><br><span class="line">    System.out.println(Modifier.toString(m.getModifiers()) + <span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">    <span class="comment">//获取返回值类型</span></span><br><span class="line">    System.out.println(m.getReturnType().getName());</span><br><span class="line">    <span class="comment">//获取方法名</span></span><br><span class="line">    System.out.print(m.getName());</span><br><span class="line">    System.out.print(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">    <span class="comment">//获取形参列表</span></span><br><span class="line">    Class[] parameterTypes = m.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (!(parameterTypes == <span class="literal">null</span> || parameterTypes.length == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">            System.out.print(parameterTypes[i].getName() + <span class="string">&quot; args_&quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i != parameterTypes.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="comment">//获取抛出的异常</span></span><br><span class="line">    Class[] exceptionTypes = m.getExceptionTypes();</span><br><span class="line">    <span class="keyword">if</span> (!(exceptionTypes == <span class="literal">null</span> || exceptionTypes.length == <span class="number">0</span>)) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;throws &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; exceptionTypes.length; i++) &#123;</span><br><span class="line">            System.out.print(exceptionTypes[i].getName() + <span class="string">&quot; args_&quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i != exceptionTypes.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取运行时类的构造器结构"><a href="#获取运行时类的构造器结构" class="headerlink" title="获取运行时类的构造器结构"></a>获取运行时类的构造器结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="comment">//getConstructors()获取当前运行时类中声明为public的构造器</span></span><br><span class="line">Constructor[] constructors = clazz.getConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor c : constructors)&#123;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//getDeclaredConstructors()获取当前运行时类中所有的构造器</span></span><br><span class="line">Constructor[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor c : declaredConstructors)&#123;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取运行时类的父类及其父类的泛型"><a href="#获取运行时类的父类及其父类的泛型" class="headerlink" title="获取运行时类的父类及其父类的泛型"></a>获取运行时类的父类及其父类的泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="comment">//获取父类</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">superclass</span> <span class="operator">=</span> clazz.getSuperclass();</span><br><span class="line">System.out.println(superclass);</span><br><span class="line"><span class="comment">//获取带泛型的父类</span></span><br><span class="line"><span class="type">Type</span> <span class="variable">genericSuperclass</span> <span class="operator">=</span> clazz.getGenericSuperclass();</span><br><span class="line">System.out.println(genericSuperclass);</span><br><span class="line"><span class="comment">//获取带泛型的父类的泛型</span></span><br><span class="line"><span class="type">ParameterizedType</span> <span class="variable">paramType</span> <span class="operator">=</span> (ParameterizedType) genericSuperclass;</span><br><span class="line">Type[] actualTypeArguments = paramType.getActualTypeArguments();</span><br><span class="line"><span class="keyword">for</span> (Type t : actualTypeArguments) &#123;</span><br><span class="line">    System.out.println(t.getTypeName());</span><br><span class="line">    System.out.println(((Class) t).getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取运行时类的接口、所在包和注解"><a href="#获取运行时类的接口、所在包和注解" class="headerlink" title="获取运行时类的接口、所在包和注解"></a>获取运行时类的接口、所在包和注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="comment">//获取运行时类实现的接口</span></span><br><span class="line">Class[] interfaces = clazz.getInterfaces();</span><br><span class="line"><span class="keyword">for</span>(Class c: interfaces)&#123;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//获取运行时类父类实现的接口</span></span><br><span class="line">Class[] interfaces1 = clazz.getSuperclass().getInterfaces();</span><br><span class="line"><span class="keyword">for</span>(Class c: interfaces1)&#123;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//获取运行时类所在包</span></span><br><span class="line"><span class="type">Package</span> <span class="variable">pack</span> <span class="operator">=</span> clazz.getPackage();</span><br><span class="line">System.out.println(pack);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//获取运行时类声明的注解</span></span><br><span class="line">Annotation[] annotations = clazz.getAnnotations();</span><br><span class="line"><span class="keyword">for</span>(Annotation a : annotations)&#123;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><h2 id="调用运行时类中的指定属性"><a href="#调用运行时类中的指定属性" class="headerlink" title="调用运行时类中的指定属性"></a>调用运行时类中的指定属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) clazz.newInstance();</span><br><span class="line"><span class="comment">//获取指定的属性，仅限于public权限的属性</span></span><br><span class="line"><span class="comment">//通常不采用此方法</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">id</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">//设置当前属性的值</span></span><br><span class="line"><span class="comment">//set()参数1指明设置哪个对象的属性，参数2表示将此属性值设置为多少</span></span><br><span class="line">id.set(p, <span class="number">1001</span>);</span><br><span class="line"><span class="comment">//获取当前属性值</span></span><br><span class="line"><span class="comment">//get()参数1指明获取哪个对象的属性</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> (<span class="type">int</span>) id.get(p);</span><br><span class="line">System.out.println(pid);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) clazz.newInstance();</span><br><span class="line"><span class="comment">//getDeclaredField(String fieldName)</span></span><br><span class="line"><span class="comment">//权限可小于public</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//保证当前属性可访问</span></span><br><span class="line">name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">name.set(p,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">System.out.println(name.get(p));</span><br></pre></td></tr></table></figure><h2 id="调用运行时类中的指定方法"><a href="#调用运行时类中的指定方法" class="headerlink" title="调用运行时类中的指定方法"></a>调用运行时类中的指定方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) clazz.newInstance();</span><br><span class="line"><span class="comment">//getDeclaredMethod()参数1指明获取的方法名，参数2指明获取方法的形参列表</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>, String.class);</span><br><span class="line">show.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//invoke()参数1指明方法的调用者，参数2指明给方法形参赋值的实参</span></span><br><span class="line"><span class="comment">//返回值即为对应类中调用方法的返回值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">nation</span> <span class="operator">=</span> (String) show.invoke(p, <span class="string">&quot;GHN&quot;</span>);</span><br><span class="line">System.out.println(nation);</span><br><span class="line"><span class="comment">//调用运行时类静态方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">showDesc</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;showDesc&quot;</span>);</span><br><span class="line">showDesc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">showDesc.invoke(Person.class);</span><br></pre></td></tr></table></figure><h2 id="调用运行时类中的指定构造器"><a href="#调用运行时类中的指定构造器" class="headerlink" title="调用运行时类中的指定构造器"></a>调用运行时类中的指定构造器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) constructor.newInstance(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">System.out.println(p);</span><br></pre></td></tr></table></figure><h2 id="反射的应用：动态代理"><a href="#反射的应用：动态代理" class="headerlink" title="反射的应用：动态代理"></a>反射的应用：动态代理</h2><p>静态代理：代理类和被代理类在编译器确定下来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">NikeClothFactory</span> <span class="variable">nikeClothFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NikeClothFactory</span>();</span><br><span class="line">        <span class="type">ProxyClothFactory</span> <span class="variable">proxyClothFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyClothFactory</span>(nikeClothFactory);</span><br><span class="line">        proxyClothFactory.produceCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ClothFactory</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyClothFactory</span> <span class="keyword">implements</span> <span class="title class_">ClothFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClothFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyClothFactory</span><span class="params">(ClothFactory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;prepare&quot;</span>);</span><br><span class="line">        factory.produceCloth();</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NikeClothFactory</span> <span class="keyword">implements</span> <span class="title class_">ClothFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Nike is producing suits&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理：根据被代理类对象动态生成代理类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="comment">//proxyInstance指的是代理类的对象</span></span><br><span class="line">        <span class="type">Human</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (Human) ProxyFactory.getProxyInstance(man);</span><br><span class="line">        <span class="comment">//当通过代理类的对象调用方法时，自动调用被代理类中同名的方法</span></span><br><span class="line">        System.out.println(proxyInstance.getBelief());</span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;Hamburger&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxyInstance</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="type">MyInvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>();</span><br><span class="line">        handler.bind(obj);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//赋值时，需要使用被代理类的对象赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当我们通过代理类的对象，调用方法a时，就会自动调用如下的方法：invoke()</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">HumanUtil</span> <span class="variable">util</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HumanUtil</span>();</span><br><span class="line"></span><br><span class="line">        util.method1();</span><br><span class="line">        <span class="comment">//调用被代理类的方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line">        util.method2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被代理类所调用方法的返回值即为当前类中invoke()的返回值</span></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HumanUtil</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通用方法1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通用方法2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    String <span class="title function_">getBelief</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">implements</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBelief</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am man&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I like &quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java8的新特性"><a href="#Java8的新特性" class="headerlink" title="Java8的新特性"></a>Java8的新特性</h1><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Lambda表达式的写法</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(r1).start();</span><br><span class="line"><span class="comment">//Lambda表达式的写法</span></span><br><span class="line">Comparator&lt;Integer&gt; comparator = (o1, o2) -&gt; Integer.compare(o1, o2);</span><br><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">comparator = Integer::compare;</span><br><span class="line">Integer[] arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">Arrays.sort(arr, comparator);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><p>举例：<code>(o1, o2) -&gt; Integer.compare(o1, o2);</code></p><p>格式：</p><ul><li>-&gt;：Lambda操作符</li><li>-&gt;左边：Lambda形参列表（其实就是接口中的抽象方法的形参列表）</li><li>-&gt;右边：Lambda体（其实就是重写的抽象方法的方法体）</li></ul><p>Lambda表达式的本质：作为接口的实例，接口为函数式接口，只有一个抽象方法</p><h3 id="Lambda表达式的使用"><a href="#Lambda表达式的使用" class="headerlink" title="Lambda表达式的使用"></a>Lambda表达式的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法格式1：无参，无返回值</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(r2).start();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法格式2：Lambda需要一个参数，但是没有返回值</span></span><br><span class="line">Consumer&lt;String&gt; con1 = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Consumer&lt;String&gt; con2 = (String s) -&gt; &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;;</span><br><span class="line">con2.accept(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法格式3：数据类型可以省略，因为可以由编译器推断得出，称为类型推断</span></span><br><span class="line">Consumer&lt;String&gt; con2 = (s) -&gt; &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;;</span><br><span class="line">con2.accept(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型推断</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法格式4：Lambda若只需一个参数时，参数的小括号可以省略</span></span><br><span class="line">Consumer&lt;String&gt; con2 = s -&gt; &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;;</span><br><span class="line">con2.accept(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法格式5：Lambda需要两个或以上的参数，多条执行语句，并且可以返回值</span></span><br><span class="line">Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Comparator&lt;Integer&gt; comparator1 = (o1, o2) -&gt;&#123;</span><br><span class="line">    System.out.println(o1);</span><br><span class="line">    System.out.println(o2);</span><br><span class="line">    <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(comparator1.compare(<span class="number">3</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法格式6：当Lambda体只有一条语句时，return与大括号若有，都可以省略</span></span><br><span class="line">Comparator&lt;Integer&gt; comparator = (o1, o2) -&gt; o1.compareTo(o2);</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>-&gt;左边：Lambda形参列表的参数类型可以省略（类型推断）；如果Lambda形参列表只有一个参数，其一对()也可以省略</li><li>-&gt;右边：Lambda体应该使用一对{}包裹；如果Lambda体只有一条执行语句（可能是return语句），可以省略这一对{}和return</li></ul><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ul><li><p>函数式接口指的是只有一个抽象方法的接口</p></li><li><p>可以通过Lambda表达式来创建该接口的对象</p></li><li><p>匿名实现类可以由Lambda表达式代替</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java内置的四大核心函数式接口"><a href="#Java内置的四大核心函数式接口" class="headerlink" title="Java内置的四大核心函数式接口"></a>Java内置的四大核心函数式接口</h3><p>消费型接口 Consumer&lt;T&gt; void accept(T t)</p><p>供给型接口 Supplier&lt;T&gt; T get()</p><p>函数型接口 Function&lt;T,R&gt; R apply(T t)</p><p>断定型接口 Predicate&lt;T&gt; boolean test(T t)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        func(<span class="number">123.456</span>, num -&gt; System.out.println(<span class="string">&quot;消费了&quot;</span> + num));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(<span class="type">double</span> num, Consumer&lt;Double&gt; consumer)</span> &#123;</span><br><span class="line">        consumer.accept(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; strs = filterString(Arrays.asList(<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;南京&quot;</span>, <span class="string">&quot;天津&quot;</span>, <span class="string">&quot;东京&quot;</span>), s -&gt; s.endsWith(<span class="string">&quot;京&quot;</span>));</span><br><span class="line">        System.out.println(strs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">filterString</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; filterString = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre.test(s)) &#123;</span><br><span class="line">                filterString.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filterString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>使用情景：当要传递给Lambda体的操作，已经有实现的方法时，可以使用方法引用</p><p>使用格式：类（或者对象）::方法名</p><p>方法引用的要求：要求接口中的抽象方法形参列表和返回值类型和方法引用的形参列表和返回值相同（仅针对于情况1和情况2）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况1：对象::实例方法</span></span><br><span class="line"><span class="comment">//Consumer void accept(T t)</span></span><br><span class="line"><span class="comment">//PrintStream void println(T t)</span></span><br><span class="line">Consumer&lt;String&gt; consumer = str-&gt;System.out.println(str);</span><br><span class="line">consumer.accept(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">Consumer&lt;String&gt; consumer1 = <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;temp.txt&quot;</span>))::println;</span><br><span class="line">consumer1.accept(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Supplier T get()</span></span><br><span class="line"><span class="comment">//Employee String getName</span></span><br><span class="line">Supplier&lt;String&gt; supplier = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>)::getName;</span><br><span class="line">System.out.println(supplier.get());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况2：类::静态方法</span></span><br><span class="line"><span class="comment">//Comparator int compare(T t1, T t2)</span></span><br><span class="line"><span class="comment">//Integer int compare(T t1, T t2)</span></span><br><span class="line">Comparator&lt;Integer&gt; comparator = Integer::compare;</span><br><span class="line">System.out.println(comparator.compare(<span class="number">48</span>, <span class="number">32</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function R apply(T t)</span></span><br><span class="line"><span class="comment">//Math Long round(Double d)</span></span><br><span class="line">Function&lt;Double,Long&gt; function = Math::round;</span><br><span class="line">System.out.println(function.apply(<span class="number">123.45</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况3：类::实例方法</span></span><br><span class="line"><span class="comment">//Comparator int compare(T t1, T t2)</span></span><br><span class="line"><span class="comment">//String int t1.compareTo(t2)</span></span><br><span class="line">Comparator&lt;String&gt; comparator = String::compareTo;</span><br><span class="line">System.out.println(comparator.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;xyz&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BiPredicate boolean test(T t1, t t2)</span></span><br><span class="line"><span class="comment">//String boolean t1.equals(t2)</span></span><br><span class="line">BiPredicate&lt;String, String&gt; biPredicate = String::equals;</span><br><span class="line">System.out.println(biPredicate.test(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abd&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function R apply(T t)</span></span><br><span class="line"><span class="comment">//Employee String getName()</span></span><br><span class="line">Function&lt;Employee, String&gt; function = Employee::getName;</span><br><span class="line">System.out.println(function.apply(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;Tom&quot;</span>)));</span><br></pre></td></tr></table></figure><h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><p>和方法引用类似，函数式接口的抽象方法形参列表和构造器的形参列表一致，抽象方法的返回值类型即为构造器所属类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Supplier T get()</span></span><br><span class="line"><span class="comment">//Employee空参构造器 Employee()</span></span><br><span class="line">Supplier&lt;Employee&gt; supplier = () -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">Supplier&lt;Employee&gt; supplier1 = Employee::<span class="keyword">new</span>;</span><br><span class="line">System.out.println(supplier1.get());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function R apply(T t)</span></span><br><span class="line">Function&lt;Integer, Employee&gt; function = Employee::<span class="keyword">new</span>;</span><br><span class="line">System.out.println(function.apply(<span class="number">1001</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BiFunction R apply(T t,U u)</span></span><br><span class="line">BiFunction&lt;Integer, String, Employee&gt; biFunction = Employee::<span class="keyword">new</span>;</span><br><span class="line">System.out.println(biFunction.apply(<span class="number">1001</span>, <span class="string">&quot;Tom&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function R apply(T t)</span></span><br><span class="line">Function&lt;Integer,String[]&gt; function = len-&gt;<span class="keyword">new</span> <span class="title class_">String</span>[len];</span><br><span class="line">String[] arr = function.apply(<span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">Function&lt;Integer,String[]&gt; function1 = String[]::<span class="keyword">new</span>;</span><br><span class="line">String[] arr1 = function.apply(<span class="number">20</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br></pre></td></tr></table></figure><h2 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2><ul><li>Stream关注的是对数据的运算，与CPU打交道；集合关注的是数据的存储，与内存打交道</li><li>Stream自己不会存储元素；Stream不会改变源对象，相反，他们会返回一个持有结果的新Stream；Stream是延迟操作的，等到需要结果的时候才会执行</li><li>Stream执行流程：Stream实例化；一系列中间操作（过滤、映射……）；终止操作</li><li>说明：一个中间操作链，对数据源的数据进行处理；一旦执行终止操作，就执行中间操作链，并产生结果，之后，Stream不会再被执行</li></ul><h3 id="Stream的实例化"><a href="#Stream的实例化" class="headerlink" title="Stream的实例化"></a>Stream的实例化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式1：通过集合</span></span><br><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"><span class="comment">//default Stream&lt;E&gt; stream() 返回一个顺序流</span></span><br><span class="line"><span class="comment">//顺序流指的是数据一个个按照顺序取</span></span><br><span class="line">Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"><span class="comment">//default Stream&lt;E&gt; parallelStream() 返回一个并行流</span></span><br><span class="line"><span class="comment">//并行流指的是并行地取数据</span></span><br><span class="line">Stream&lt;Employee&gt; parallelStream = employees.parallelStream();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式2：通过数组</span></span><br><span class="line"><span class="comment">//调用Arrays类的static&lt;T&gt; Stream&lt;T&gt; stream(T[] array)</span></span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">Employee[] arr = <span class="keyword">new</span> <span class="title class_">Employee</span>[]&#123;e1, e2&#125;;</span><br><span class="line">Stream&lt;Employee&gt; stream1 = Arrays.stream(arr);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式3：通过Stream的of方法</span></span><br><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建无限流</span></span><br><span class="line"><span class="comment">//迭代</span></span><br><span class="line"><span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">//生成</span></span><br><span class="line"><span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="Stream的中间操作"><a href="#Stream的中间操作" class="headerlink" title="Stream的中间操作"></a>Stream的中间操作</h3><h4 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//筛选与切片</span></span><br><span class="line">List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line"><span class="comment">//filter(Predicate p) 接收Lambda，从流中排除某些元素</span></span><br><span class="line">list.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">7000</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">//limit(n) 截断流，使其元素不超过给定元素</span></span><br><span class="line">list.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">//skip(n) 跳过元素，返回一个扔掉了前n个元素的流。若元素不满n个，那么返回一个空流</span></span><br><span class="line">list.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">//distinct() 筛选，通过流生成元素的hashCode()和equals()去除重复元素</span></span><br><span class="line">list.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//映射</span></span><br><span class="line">    <span class="comment">//map(Function f) 接收一个函数作为参数，将元素转换成其他形式或提取信息</span></span><br><span class="line">    <span class="comment">//该函数将被应用到每个元素上，并将其映射成一个新元素</span></span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">    list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);</span><br><span class="line">    System.out.println();</span><br><span class="line">    EmployeeData.getEmployees().stream().map(e -&gt; e.getName()).filter(str -&gt; str.length() &gt; <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    list.stream().map(StreamAPITest1::fromStringToStream).forEach(s-&gt;&#123;</span><br><span class="line">        s.forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//flatMap(Function f) 接收一个函数作为参数，将流中的每一个值都转换成一个流</span></span><br><span class="line">    <span class="comment">//然后把所有流连接成一个流</span></span><br><span class="line">    Stream&lt;Character&gt; characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);</span><br><span class="line">    characterStream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title function_">fromStringToStream</span><span class="params">(String str)</span>&#123;</span><br><span class="line">    List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c : str.toCharArray())&#123;</span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="comment">//sorted() 自然排序</span></span><br><span class="line">Arrays.asList(<span class="number">12</span>,<span class="number">33</span>,<span class="number">56</span>,<span class="number">43</span>,<span class="number">3</span>,<span class="number">25</span>,-<span class="number">11</span>,-<span class="number">4</span>).stream().sorted().forEach(System.out::println);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//sorted(Comparator comparator) 定制排序</span></span><br><span class="line">EmployeeData.getEmployees().stream().sorted((e1,e2)-&gt;(<span class="type">int</span>)(e1.getSalary()-e2.getSalary())).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="Stream的终止操作"><a href="#Stream的终止操作" class="headerlink" title="Stream的终止操作"></a>Stream的终止操作</h3><h4 id="匹配与查找"><a href="#匹配与查找" class="headerlink" title="匹配与查找"></a>匹配与查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配</span></span><br><span class="line"><span class="comment">//allMatch(Predicate p) 检查是否匹配所有元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> EmployeeData.getEmployees().stream().allMatch(e -&gt; e.getAge() &gt; <span class="number">18</span>);</span><br><span class="line">System.out.println(b1);</span><br><span class="line"><span class="comment">//anyMatch(Predicate p) 检查是否至少匹配一个元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> EmployeeData.getEmployees().stream().anyMatch(e -&gt; e.getSalary() &gt; <span class="number">10000</span>);</span><br><span class="line">System.out.println(b2);</span><br><span class="line"><span class="comment">//noneMatch(Predicate p) 检查是否没有匹配的元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b3</span> <span class="operator">=</span> EmployeeData.getEmployees().stream().noneMatch(e -&gt; e.getName().contains(<span class="string">&quot;雷&quot;</span>));</span><br><span class="line">System.out.println(b3);</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="comment">//findFirst 返回第一个元素</span></span><br><span class="line">Optional&lt;Employee&gt; first = EmployeeData.getEmployees().stream().findFirst();</span><br><span class="line">System.out.println(first);</span><br><span class="line"><span class="comment">//findAny 返回当前流中任意一个元素</span></span><br><span class="line">Optional&lt;Employee&gt; any = EmployeeData.getEmployees().stream().findAny();</span><br><span class="line">System.out.println(any);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//count 返回流中元素的个数</span></span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> EmployeeData.getEmployees().stream().filter(e -&gt; e.getSalary() &gt; <span class="number">5000</span>).count();</span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">//max(Comparator c) 返回流中最大值</span></span><br><span class="line">Optional&lt;Double&gt; max = EmployeeData.getEmployees().stream().map(Employee::getSalary).max(Double::compareTo);</span><br><span class="line">System.out.println(max);</span><br><span class="line"><span class="comment">//min(Comparator c) 返回流中最小值</span></span><br><span class="line">Optional&lt;Employee&gt; min = EmployeeData.getEmployees().stream().min(Comparator.comparingDouble(Employee::getSalary));</span><br><span class="line">System.out.println(min);</span><br><span class="line"><span class="comment">//forEach(Consumer c) 内部迭代</span></span><br><span class="line">EmployeeData.getEmployees().stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归约</span></span><br><span class="line"><span class="comment">//reduce(T identity, BinaryOperator) 可以将流中元素反复结合起来，得到一个值，返回T</span></span><br><span class="line"><span class="comment">//identity表示初始值</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum1</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>).stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">System.out.println(sum1);</span><br><span class="line"><span class="comment">//reduce(BinaryOperator) 可以将流中元素反复结合起来，得到一个值，返回Optional&lt;T&gt;</span></span><br><span class="line">Optional&lt;Double&gt; sumSalary = EmployeeData.getEmployees().stream().map(e -&gt; e.getSalary()).reduce(Double::sum);</span><br><span class="line">System.out.println(sumSalary);</span><br></pre></td></tr></table></figure><h4 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//收集</span></span><br><span class="line"><span class="comment">//collect(Collector c)将流转换成其他形式。接收一个Collector的实现，用于给Stream中元素做汇总操作</span></span><br><span class="line">List&lt;Employee&gt; list = EmployeeData.getEmployees().stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toList());</span><br><span class="line">Set&lt;Employee&gt; set = EmployeeData.getEmployees().stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toSet());</span><br><span class="line">list.stream().forEach(System.out::println);</span><br><span class="line">System.out.println();</span><br><span class="line">set.stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h2><p>Optional&lt;T&gt;是一个容器类，可以保存类型T的值，表示这个值存在，或者仅仅保存null，表示这个值不存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Optional实例</span></span><br><span class="line"><span class="comment">//Optional.of(T t) 创建一个Optional实例，t必须非空</span></span><br><span class="line"><span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>();</span><br><span class="line">Optional&lt;Girl&gt; optionalGirl = Optional.of(girl);</span><br><span class="line"><span class="comment">//Optional.empty() 创建一个空的Optional实例</span></span><br><span class="line"><span class="comment">//Optional.ofNullable(T t) t可以为null</span></span><br><span class="line">girl = <span class="literal">null</span>;</span><br><span class="line">Optional&lt;Girl&gt; optionalGirl1 = Optional.ofNullable(girl);</span><br></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">girlName</span> <span class="operator">=</span> getGirlName(boy);</span><br><span class="line">    <span class="comment">//出现空指针异常，boy内部的girl没有赋值对象</span></span><br><span class="line">    System.out.println(girlName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getGirlName</span><span class="params">(Boy boy)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> boy.getGirl().getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    boy = <span class="keyword">new</span> <span class="title class_">Boy</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">girlName1</span> <span class="operator">=</span> getGirlName1(boy);</span><br><span class="line">    System.out.println(girlName1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Optional类优化以后的getGirlName方法</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getGirlName1</span><span class="params">(Boy boy)</span> &#123;</span><br><span class="line">    Optional&lt;Boy&gt; boyOptional = Optional.ofNullable(boy);</span><br><span class="line">    <span class="comment">//T orElse(T other)如果有值将其返回，否则返回指定的other对象</span></span><br><span class="line">    <span class="comment">//boy1肯定非空</span></span><br><span class="line">    <span class="type">Boy</span> <span class="variable">boy1</span> <span class="operator">=</span> boyOptional.orElse(<span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;taylor&quot;</span>)));</span><br><span class="line">    <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> boy1.getGirl();</span><br><span class="line">    Optional&lt;Girl&gt; girlOptional = Optional.ofNullable(girl);</span><br><span class="line">    <span class="comment">//girl1肯定非空</span></span><br><span class="line">    <span class="type">Girl</span> <span class="variable">girl1</span> <span class="operator">=</span> girlOptional.orElse(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;vivian&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> girl1.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Optional类：为了在程序中避免出现空指针异常而创建的</p><p>常用方法</p><ul><li>ofNullable(T t)</li><li>orElse(T other)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;进程对应堆和方法区，线程对应栈和程序计数器1&lt;/li&gt;
&lt;li&gt;进程包含多个线程，线程共用进程的堆和方法区&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java基础编程 尚硅谷宋红康Java核心基础笔记</title>
    <link href="https://stardust-sudo.github.io/2022/04/07/99d3ab4a18d6/"/>
    <id>https://stardust-sudo.github.io/2022/04/07/99d3ab4a18d6/</id>
    <published>2022-04-07T04:09:05.000Z</published>
    <updated>2022-04-16T00:36:59.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础编译运行"><a href="#基础编译运行" class="headerlink" title="基础编译运行"></a>基础编译运行</h1><p>编译java文件为class文件（字节码文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) E:\###&gt;javac HelloWorld.java</span><br></pre></td></tr></table></figure><p>运行字节码文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) E:\###&gt;java HellowWorld</span><br></pre></td></tr></table></figure><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>建立单元测试的JUnit包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入@Test</span></span><br><span class="line"><span class="comment">//直接右击testFunc即可测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JUnitTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFunc</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="从键盘输入"><a href="#从键盘输入" class="headerlink" title="从键盘输入"></a>从键盘输入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scanner.nextInt();</span><br></pre></td></tr></table></figure><h1 id="产生随机数"><a href="#产生随机数" class="headerlink" title="产生随机数"></a>产生随机数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span>)(Math.random() * <span class="number">90</span> + <span class="number">10</span>);</span><br><span class="line"><span class="comment">//Math.random: [0,1)-&gt;[0,90) + 10-&gt;[10,100)</span></span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h2 id="单行-x2F-多行注释"><a href="#单行-x2F-多行注释" class="headerlink" title="单行&#x2F;多行注释"></a>单行&#x2F;多行注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJava</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="comment">//单行注释</span></span><br><span class="line">       System.out.println(<span class="string">&quot;Hello world&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> somebody</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">文档注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJava</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javadoc生成文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) E:\code\day01&gt;javadoc -d myHello -author -version -encoding UTF-8 -charset UTF-8 HelloJava.java</span><br></pre></td></tr></table></figure><p>-d 表示输出目录（directory），目录名myHello</p><p>-author 包含 @author 段</p><p>-version  包含 @version 段</p><h1 id="名称命名规则"><a href="#名称命名规则" class="headerlink" title="名称命名规则"></a>名称命名规则</h1><ul><li>包名：xxxyyyzzz</li><li>类名、接口名：XxxYxxZzz</li><li>变量名、方法名：xxxYyyZzz</li><li>常量名：XXX_YYY_ZZZ</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>byte</td><td>1字节&#x3D;8bit位</td><td>-128~127</td></tr><tr><td>short</td><td>2字节</td><td>-2^15^~2^15^-1</td></tr><tr><td>int</td><td>4字节</td><td>-2^31^~2^31^-1（约21亿）</td></tr><tr><td>long</td><td>8字节</td><td>-2^63^~2^63^</td></tr></tbody></table><p>常用int</p><p>使用long需要在数字后加上L或l</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">12345L</span>;</span><br></pre></td></tr></table></figure><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th><th>精度</th></tr></thead><tbody><tr><td>单精度float</td><td>4字节</td><td>-3.403E38~3.403E38</td><td>精确到7位有效数字</td></tr><tr><td>双精度double</td><td>8字节</td><td>-1.798E308~1.798E308</td><td>精确到14位有效数字</td></tr></tbody></table><p>java浮点型常量默认为double</p><p>声明float型变量，需要在数字后加f或者F</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1.23f</span>;</span><br></pre></td></tr></table></figure><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>char  1字符&#x3D;2字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="乱码和字符集"><a href="#乱码和字符集" class="headerlink" title="乱码和字符集"></a>乱码和字符集</h3><p>字符集是字符和数值之间的映射，不同字符集代表映射</p><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>boolean类型变量只能取true或false</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="类型自动提升"><a href="#类型自动提升" class="headerlink" title="类型自动提升"></a>类型自动提升</h3><p>容量<a href="%E5%AE%B9%E9%87%8F%E5%A4%A7%E5%B0%8F%E6%8C%87%E7%9A%84%E6%98%AF%E6%A0%87%E8%AF%86%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4%E5%A4%A7%E5%B0%8F%EF%BC%8Cfloat%E6%AF%94long%E5%AE%B9%E9%87%8F%E5%A4%A7">^1</a>小的数据类型变量和容量大的数据类型变量做运算，结果自动提升为容量大的类型</p><p>byte&#x2F;short&#x2F;char–&gt;int–&gt;long–&gt;float–&gt;double</p><p>特别地，byte&#x2F;short&#x2F;char互相之间做运算，结果为int类型</p><p>byte&#x2F;short&#x2F;char自己与自己做运算，结果也为int类型</p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1234.567</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)d;</span><br></pre></td></tr></table></figure><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><p>String类型变量可以与基本数据类型变量做连接运算（+）</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - * / % ++ -- </span><br></pre></td></tr></table></figure><p>整数之间使用&#x2F;表示整除</p><p>%表示取余，结果的符号与被模数一致</p><p>++a表示先运算后取值，a++表示先取值后运算</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">= += -= *= /= %=</span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">== != &lt; &gt; &lt;= &gt;= <span class="keyword">instanceof</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; | ! &amp;&amp; || ^</span><br></pre></td></tr></table></figure><p>&amp;逻辑与，&amp;&amp;短路与</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> &amp; (num++ &gt; <span class="number">0</span>);<span class="comment">//num++运行</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; (num++ &gt; <span class="number">0</span>);<span class="comment">//num++不运行</span></span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt; &gt;&gt; &gt;&gt;&gt; &amp; | ^ ~</span><br></pre></td></tr></table></figure><p>&gt;&gt;&gt;表示无符号右移，无论被移数最高位是0或1，补0</p><p>&gt;&gt;表示右移，被移数最高位为0，补0，被移数最高位为1，补1</p><p>异或^的应用：交换a和b的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(条件表达式)？表达式<span class="number">1</span>:表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">    执行代码块<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">    执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">         语句<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">         语句<span class="number">2</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">         语句<span class="number">3</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>对于switch结构，</p><ul><li>没有break的情况下，匹配了常量1之后，将执行语句1、语句2和语句3</li><li>表达式的类型为如下类型之一：byte&#x2F;short&#x2F;char&#x2F;int&#x2F;枚举类型&#x2F;String类型</li><li>case之后只能声明常量，不能声明范围</li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    执行语句;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    执行语句;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    执行语句;</span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组声明</span></span><br><span class="line"><span class="type">int</span>[] arr1;</span><br><span class="line"><span class="comment">//数组初始化</span></span><br><span class="line">arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>,<span class="number">1005</span>&#125;;</span><br><span class="line"><span class="comment">//调用数组元素</span></span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">1001</span>;</span><br><span class="line"><span class="comment">//数组长度</span></span><br><span class="line">arr1.length;</span><br><span class="line"><span class="comment">//遍历数组元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; arr1.length; i++)&#123;</span><br><span class="line">    System.out.println(arr1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组声明</span></span><br><span class="line"><span class="type">int</span>[][] arr2;</span><br><span class="line"><span class="comment">//二维数组初始化</span></span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][];</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][<span class="number">6</span>];</span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//调用二维数组元素</span></span><br><span class="line">arr2[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1001</span>;</span><br><span class="line"><span class="comment">//二维数组长度</span></span><br><span class="line">arr2.length;</span><br><span class="line">arr2[<span class="number">0</span>].length;</span><br><span class="line"><span class="comment">//遍历数组元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; arr2.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; arr2[i].length; j++)&#123;</span><br><span class="line">        System.out.println(arr1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>数组引用分配在栈中，数组分配在堆中</p></li><li><p>数组引用存储的是数组在堆中的首地址</p></li><li><p>二维数组引用指向堆中的数组，而堆中数组中的每一个元素指向一个数组</p><h2 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">Arrays.equals(a,b);</span><br><span class="line">Arrays.toString(a);</span><br><span class="line">Arrays.fill(a,<span class="number">0</span>);</span><br><span class="line">Arrays.sort(a);</span><br><span class="line">Arrays.binarySearch(a,<span class="number">2</span>);<span class="comment">//二分查找的前提是有序</span></span><br></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>类与实例</p><p>类包含属性和方法</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><ul><li><p>在同一个类中，允许存在几个同名方法，只要他们的参数个数或者参数类型不同即可</p></li><li><p>与返回值无关，只关注参数列表（参数个数或者参数类型）</p></li><li><p>调用方法时，根据参数列表选择调用哪个方法</p></li></ul><h3 id="可变个数形参"><a href="#可变个数形参" class="headerlink" title="可变个数形参"></a>可变个数形参</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String ... strs)</span>&#123;</span><br><span class="line">    System.out.println(strs[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>);</span><br></pre></td></tr></table></figure><p>参数个数可以是0个、1个和多个</p><h3 id="方法参数的值传递机制"><a href="#方法参数的值传递机制" class="headerlink" title="方法参数的值传递机制"></a>方法参数的值传递机制</h3><ul><li>如果变量是基本数据类型，此时赋值实际数值</li><li>如果变量是引用数据类型，此时赋值对象在堆中的地址</li></ul><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><p> 在方法体内调用自己</p><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p>private&lt;缺省&lt;protected&lt;public</p><table><thead><tr><th>修饰符</th><th align="center">类内部</th><th align="center">同一个包</th><th align="center">不同包的子类</th><th align="center">同一个工程</th></tr></thead><tbody><tr><td>private</td><td align="center">✔</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>缺省</td><td align="center">✔</td><td align="center">✔</td><td align="center"></td><td align="center"></td></tr><tr><td>protected</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td><td align="center"></td></tr><tr><td>public</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td></tr></tbody></table><p>private&#x2F;缺省&#x2F;protected&#x2F;public修饰类成员（属性&#x2F;方法&#x2F;构造器&#x2F;内部类）</p><p>缺省&#x2F;public修饰类</p><ul><li>default类只能被同一个包内部的类访问</li><li>public类可以在任何地方被访问</li></ul><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Sample</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Sample</span><span class="params">(String n)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="this的使用"><a href="#this的使用" class="headerlink" title="this的使用"></a>this的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dream</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.dream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this调用构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        ...<span class="comment">//约50行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="package和import的使用"><a href="#package和import的使用" class="headerlink" title="package和import的使用"></a>package和import的使用</h2><ul><li><p>package声明在类和接口文件首行，表示属于某个包</p></li><li><p>import导入指定包下的类</p></li></ul><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subclass</span> <span class="keyword">extends</span> <span class="title class_">Sperclass</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类继承父类，获得父类的属性和方法</p><h3 id="方法的重写（override）"><a href="#方法的重写（override）" class="headerlink" title="方法的重写（override）"></a>方法的重写（override）</h3><p>子类覆盖父类的方法</p><p>重写规定：</p><ul><li>子类重写的方法和父类方法的方法名和形参列表一致</li><li>子类重写的方法的权限修饰符不小于父类方法的权限修饰符<ul><li>子类不能重写父类的private方法（父类方法调用private方法还是调用父类的方法，而不是子类里相同方法名和形参列表的方法）</li></ul></li><li>返回值类型：<ul><li>父类方法返回值是void，子类重写方法返回值仍旧是void</li><li>父类方法返回值是A类型，子类重写方法的返回值是A类或者A类的子类</li><li>父类方法返回值是基本数据类型，子类重写方法的返回值是相同的基本数据类型</li></ul></li><li>子类重写的方法抛出的异常类型不大于父类方法抛出的异常类型（子类重写的方法抛出的异常类型是父类方法抛出的异常类型的子类）</li><li>子类和父类的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写）</li></ul><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><ul><li>可以调用父类的属性、方法和构造器</li><li>子类和父类出现了同名的属性，父类的属性使用super调用</li><li>子类重写了父类的方法，想在子类调用父类被重写的方法，使用super关键字</li><li>super(形参列表)调用父类构造器</li></ul><h3 id="子类对象实例化过程"><a href="#子类对象实例化过程" class="headerlink" title="子类对象实例化过程"></a>子类对象实例化过程</h3><p>先调用父类构造器，再调用子类构造器，但是自始至终只创建过一个对象，即子类对象</p><h2 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h2><ul><li><p>父类的引用指向子类的对象</p></li><li><p>虚拟方法调用：父类引用调用子父类同名同参数的方法，实际执行的是子类重写的方法</p></li><li><p>父类的引用指向子类的对象，父类引用不能调用子类中有而父类中没有的方法，也不能调用子类中有而父类中没有的属性</p></li><li><p>父类的引用指向子类的对象，在编译期只能调用父类中声明的方法，但在运行期执行的是子类重写的方法</p></li><li><p>对象的多态性只适用于方法，不适用于属性。父类引用指向子类对象，子父类有同名属性，父类引用调用父类属性</p></li><li><p>重载在编译器就确定调用什么方法，重写在运行期才确定调用什么方法</p></li></ul><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>父类引用指向子类对象，如果想要调用子类特有的属性和方法，需要向下转型，使用强制类型转化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) person;<span class="comment">//Student是Person的子类</span></span><br></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><ul><li>a instanceof A判断对象a是否为类A的对象</li><li>使用强制类型转换的时候，可能出现ClassCastException异常，需要在向下转型之前使用instanceof进行判断</li><li>a instanceof A&#x3D;&#x3D;&gt;a instanceof A的父类</li></ul><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h3 id="x3D-x3D-运算符"><a href="#x3D-x3D-运算符" class="headerlink" title="&#x3D;&#x3D;运算符"></a>&#x3D;&#x3D;运算符</h3><ul><li>对于基本数据类型，比较保存的数据是否相同</li><li>对于引用数据类型，比较保存的地址值是否相同，即两个引用是否指向同一个对象</li></ul><h3 id="equals-使用"><a href="#equals-使用" class="headerlink" title="equals()使用"></a>equals()使用</h3><p>对象比较需要重写equals方法</p><h3 id="toString-使用"><a href="#toString-使用" class="headerlink" title="toString()使用"></a>toString()使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(person);</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">System.out.println(person.toString());</span><br></pre></td></tr></table></figure><p>需要重写toString方法</p><h2 id="包装类（Wrapper）的使用"><a href="#包装类（Wrapper）的使用" class="headerlink" title="包装类（Wrapper）的使用"></a>包装类（Wrapper）的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本数据类型转换为包装类</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">12345</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;12345&quot;</span>);</span><br><span class="line"><span class="comment">//包装类类型转换为基本数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intNum</span> <span class="operator">=</span> integer.intValue();</span><br><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intNum</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="type">int</span> num;</span><br><span class="line"><span class="comment">//自动拆箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intNum1</span> <span class="operator">=</span> integer;</span><br><span class="line"><span class="comment">//基本数据类型、包装类转换为String类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intNum</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> intNum +<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">Float</span> <span class="variable">float</span> <span class="operator">=</span> <span class="number">12.3f</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> String.valueof(<span class="type">float</span>);<span class="comment">//&quot;12.3&quot;</span></span><br><span class="line"><span class="comment">//String类型转换为基本数据类型、包装类</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;123&quot;</span>); </span><br></pre></td></tr></table></figure><p>注：Integer类存在IntegerCache结构，缓存-128~127的Integer对象，用户使用自动装箱，引用指向IntegerCache缓存的Integer对象 </p><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><p>使用static修饰属性， 静态变量，多个对象共享同一个属性，即类变量，静态变量在内存中只会存在一份，存储在方法区的静态域中 </p><p>使用static修饰方法，静态方法，在静态方法中可以调用静态属性方法，在非静态方法中可以调用静态和非静态属性方法，不可以使用this&#x2F;super</p><h2 id="main-方法"><a href="#main-方法" class="headerlink" title="main()方法"></a>main()方法</h2><ul><li><p>程序的入口</p></li><li><p>静态方法</p></li><li><p>main(String[] args)其中String[] args形参也可以作为我们与控制台交互的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">System.out.println(args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;javac MainDemo.java</span><br><span class="line">&gt;java MainDemo abc def ghi</span><br><span class="line">abc</span><br><span class="line">def</span><br><span class="line">ghi</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul><li>作用：用来初始化类、对象</li><li>只能用static修饰或者不修饰，即静态代码块和非静态代码块</li><li>静态代码块：随着类的加载而执行；只执行一次；可以在加载类时初始化类的信息；如果有多个静态代码块，按照声明先后顺序执行；静态代码块优先于代码块执行</li><li>非静态代码块：随着对象的创建而执行；每创建一个对象，就执行一次；可以在创建对象时初始化对象属性；如果有多个非静态代码块，按照声明先后顺序执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先加载父类再加载子类，即先执行父类静态代码块再执行子类静态代码块，然后先调用父类代码块构造器再调用子类代码块构造器</li></ul><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><ul><li>final修饰类， 那么这个类不能被继承</li><li>final修饰方法，那么这个方法不能被重写</li><li>final修饰属性，可以视作常量（名字大写）</li><li>final修饰局部变量，可以视作常量（名字大写）</li></ul><h2 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h2><p>abstract修饰类，抽象类</p><ul><li>此类不能实例化</li><li>抽象类仍有构造器，便于子类实例化调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Klass</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>abstract修饰方法，抽象方法</p><ul><li>抽象方法只有方法声明，没有方法体</li><li>包含抽象方法的类一定是抽象类，而抽象类中可以没有抽象方法</li><li>若子类重写了父类中所有抽象方法后，此子类方可实例化</li><li>若子类没有重写父类中所有抽象方法后，则此子类为抽象类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>abstract不能修饰属性和构造器</li><li>abstract不能修饰private方法、静态方法和final修饰方法</li></ul><p>创建抽象类的匿名子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>使用interface定义接口</li><li>接口和类是并列的两个结构</li><li>如何定义接口：定义接口中的成员<ul><li>JDK7及以前：只能定义全局常量和抽象方法<ul><li>全局常量：public static final，书写时可以省略</li><li>抽象方法：public abstract</li></ul></li><li>JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法和默认方法<ul><li>接口中定义的静态方法，只能通过接口来调用</li><li>使用实现类的对象可以调用默认default方法</li><li>如果实现类重写了默认方法，那么调用时调用重写的方法</li><li>如果实现类继承的父类和实现的接口中声明了同名同参数的方法，那么子类在没有重写的情况下，默认调用父类中同名同参数方法，类优先</li><li>如果实现类实现了多个接口，多个接口定义了同名同参数的默认方法，那么在实现类没有重写此方法的时候报错，发生接口冲突</li><li>如何在实现类的方法中调用父类和接口中被重写的方法<ul><li>super.method()</li><li>接口.super.method()</li></ul></li></ul></li></ul></li><li>接口中不能定义构造器</li><li>类implements接口</li><li>类可以实现多个接口</li><li>格式：class A extends B implements C,D</li><li>接口与接口之间可以多继承interface A extends B,C </li><li>接口体现多态性，接口引用指向实现类</li><li>接口实际上可以看作一种规范</li><li>驱动即接口规范的实现类</li></ul><p>创建接口的匿名实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collections.sort(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(), <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li>类A声明在类B内，则类A是内部类，类B是外部类</li><li>内部类的分类：成员内部类（静态和非静态  ）&#x2F;局部内部类（方法内、代码块内和构造器内）</li></ul><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ul><li><strong>Error</strong>：JVM无法解决的问题，比如StackOverflowError和OOM（Out Of Memory，内存耗尽）</li><li><strong>Exception</strong>：因编程错误或者偶然因素导致的问题，比如空指针访问和数组角标越界</li><li>编译期异常：编译的时候就会报出来的异常；运行期异常：运行的时候才会报出来的异常</li></ul><h2 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h2><ul><li>抛异常：一旦出现异常，就抛出异常，后续代码不执行</li><li>抓异常：try-catch-finally &#x2F; throws</li></ul><h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 变量名<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 变量名<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//一定会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>finally中声明的代码一定会执行，即使try中有return，catch中有异常和return</li><li>数据库连接、输入输出流和网络编程Socket等资源，JVM不能自动回收，需要手动释放，适合写在finally</li></ul><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> method <span class="keyword">throws</span> XxxException&#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;提示信息&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户自定义异常类"><a href="#用户自定义异常类" class="headerlink" title="用户自定义异常类"></a>用户自定义异常类</h2><ul><li>继承于现有的异常结构：RuntimeException和Exception</li><li>提供全局常量：serialVersionUID</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">70348971939L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础编译运行&quot;&gt;&lt;a href=&quot;#基础编译运行&quot; class=&quot;headerlink&quot; title=&quot;基础编译运行&quot;&gt;&lt;/a&gt;基础编译运行&lt;/h1&gt;&lt;p&gt;编译java文件为class文件（字节码文件）&lt;/p&gt;
&lt;figure class=&quot;highlight p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>win命令行指令</title>
    <link href="https://stardust-sudo.github.io/2022/04/06/59782945df67/"/>
    <id>https://stardust-sudo.github.io/2022/04/06/59782945df67/</id>
    <published>2022-04-06T08:58:04.000Z</published>
    <updated>2022-04-07T04:32:55.545Z</updated>
    
    <content type="html"><![CDATA[<p>上下键可调出最近使用的命令</p><p>转到D盘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) C:\Users\boneScription&gt;d:</span><br></pre></td></tr></table></figure><p>查看D盘下文件目录（dir-directory-目录）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) D:\&gt;dir</span><br><span class="line"> 驱动器 D 中的卷是 Data</span><br><span class="line"> 卷的序列号是 8E70-B4EE</span><br><span class="line"></span><br><span class="line"> D:\ 的目录</span><br><span class="line"></span><br><span class="line">2022/03/19  21:39    &lt;DIR&gt;          7SUCLOUD</span><br><span class="line">2021/05/19  07:57    &lt;DIR&gt;          apache-maven-3.6.3</span><br><span class="line">2022/03/18  06:18    &lt;DIR&gt;          BaiduNetdiskDownload</span><br><span class="line">2021/03/28  18:23    &lt;DIR&gt;          comma2k19</span><br><span class="line">......</span><br><span class="line">               1 个文件  4,446,390,272 字节</span><br><span class="line">              19 个目录 285,296,730,112 可用字节</span><br></pre></td></tr></table></figure><p>创建名叫java的文件夹（md-make directory）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) D:\&gt;md java</span><br></pre></td></tr></table></figure><p>进入java文件夹（cd-change directory）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) D:\&gt;cd java</span><br><span class="line">(base) D:\&gt;cd d:\java</span><br></pre></td></tr></table></figure><p>退出文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1\team1&gt;cd..</span><br></pre></td></tr></table></figure><p>回到D盘符下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1\team1&gt;cd\</span><br><span class="line"></span><br><span class="line">(base) d:\&gt;</span><br></pre></td></tr></table></figure><p>创建md文件，并且输入内容（\br表示回车）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1\team1&gt;echo #head\br&gt;1.md</span><br></pre></td></tr></table></figure><p>删除文件（del-delete）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1\team1&gt;del 1.md</span><br></pre></td></tr></table></figure><p>删除以.txt结尾的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1\team1&gt;del  *.txt</span><br></pre></td></tr></table></figure><p>删除空的文件夹（rd-remove directory）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1&gt;rd team2</span><br></pre></td></tr></table></figure><p>删除非空的文件夹</p><ol><li>del 文件夹中的文件</li><li>rd 文件夹</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) d:\java\class1&gt;del team1</span><br><span class="line">d:\java\class1\team1\*, 是否确认(Y/N)? y</span><br><span class="line"></span><br><span class="line">(base) d:\java\class1&gt;rd team1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上下键可调出最近使用的命令&lt;/p&gt;
&lt;p&gt;转到D盘&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown常用语法</title>
    <link href="https://stardust-sudo.github.io/2022/04/06/b5a553aa6c84/"/>
    <id>https://stardust-sudo.github.io/2022/04/06/b5a553aa6c84/</id>
    <published>2022-04-06T08:57:08.000Z</published>
    <updated>2022-04-15T10:35:23.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>#一级标题</p><p>##二级标题</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>&gt;引用</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>-列项1</p><p>-列项2</p><p>-列项3</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>1.列项1</p><p>2.列项2</p><p>3.列项3</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>`&#96;&#96;java 回车</p><h3 id="内连代码"><a href="#内连代码" class="headerlink" title="内连代码"></a>内连代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`System.out.println()` </span><br></pre></td></tr></table></figure><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><h3 id="公式块"><a href="#公式块" class="headerlink" title="公式块"></a>公式块</h3><p>$$ 回车</p><p>数学公式使用latex输入</p><h3 id="内连公式"><a href="#内连公式" class="headerlink" title="内连公式"></a>内连公式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$latex$</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>|列名1|列名2| 回车</p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java[^脚注]</span><br><span class="line">[^脚注]: 一种编程语言</span><br></pre></td></tr></table></figure><h2 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h2><p>— 回车</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[toc] 回车</p><p>toc：table of content</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="内联链接"><a href="#内联链接" class="headerlink" title="内联链接"></a>内联链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[bing搜索]([www.bing.com](http://www.bing.com/) “必应&quot;)</span><br></pre></td></tr></table></figure><p>鼠标悬停在bing搜索上会显示必应</p><h3 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[内部链接](#标题-1)</span><br></pre></td></tr></table></figure><p>点击内部链接跳转到标题 1</p><h3 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[bing链接][bing]</span><br><span class="line">[bing]: www.bing.com</span><br></pre></td></tr></table></figure><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;www.bing.com&gt;</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](/path/to/img.jpg)</span><br></pre></td></tr></table></figure><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br></pre></td></tr></table></figure><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**加粗**</span><br></pre></td></tr></table></figure><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><h2 id="和-需要加-转义"><a href="#和-需要加-转义" class="headerlink" title="*和_需要加\转义"></a>*和_需要加\转义</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;p&gt;#一级标题&lt;/p&gt;
&lt;p&gt;##二级标题&lt;/p&gt;
&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>debug</title>
    <link href="https://stardust-sudo.github.io/2022/04/06/15e9b9396bcb/"/>
    <id>https://stardust-sudo.github.io/2022/04/06/15e9b9396bcb/</id>
    <published>2022-04-06T08:56:05.000Z</published>
    <updated>2022-04-07T04:32:29.572Z</updated>
    
    <content type="html"><![CDATA[<ol><li>System.out.println()</li><li>打断点调试<ul><li>step over：跳过代码</li><li>step into：进入方法</li><li>step return：离开方法返回</li><li>resume：执行到下一个断点或者直接结束</li><li>drop to frame：跳到方法首行</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;System.out.println()&lt;/li&gt;
&lt;li&gt;打断点调试&lt;ul&gt;
&lt;li&gt;step over：跳过代码&lt;/li&gt;
&lt;li&gt;step into：进入方法&lt;/li&gt;
&lt;li&gt;step return：离开方法返回&lt;/li&gt;
&lt;li&gt;resume：执行到下</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Eclipse快捷键</title>
    <link href="https://stardust-sudo.github.io/2022/04/06/54ba3909c8c4/"/>
    <id>https://stardust-sudo.github.io/2022/04/06/54ba3909c8c4/</id>
    <published>2022-04-05T16:00:00.000Z</published>
    <updated>2022-04-06T14:03:47.241Z</updated>
    
    <content type="html"><![CDATA[<p>Eclipse中的快捷键：</p><ol><li><p>补全代码的声明：alt + &#x2F;</p></li><li><p>快速修复: ctrl + 1  </p></li><li><p>批量导包：ctrl + shift + o</p></li><li><p>使用单行注释：ctrl + &#x2F;</p></li><li><p>使用多行注释： ctrl + shift + &#x2F;   </p></li><li><p>取消多行注释：ctrl + shift + \</p></li><li><p>复制指定行的代码：ctrl + alt + down 或 ctrl + alt + up</p></li><li><p>删除指定行的代码：ctrl + d</p></li><li><p>上下移动代码：alt + up  或 alt + down</p></li><li><p>切换到下一行代码空位：shift + enter</p></li><li><p>切换到上一行代码空位：ctrl + shift + enter</p></li><li><p>如何查看源码：ctrl + 选中指定的结构   或  ctrl + shift + t</p></li><li><p>退回到前一个编辑的页面：alt + left </p></li><li><p>进入到下一个编辑的页面(针对于上面那条来说的)：alt + right</p></li><li><p>光标选中指定的类，查看继承树结构：ctrl + t</p></li><li><p>复制代码： ctrl + c</p></li><li><p>撤销： ctrl + z</p></li><li><p>反撤销： ctrl + y</p></li><li><p>剪切：ctrl + x </p></li><li><p>粘贴：ctrl + v</p></li><li><p>保存： ctrl + s</p></li><li><p>全选：ctrl + a</p></li><li><p>格式化代码： ctrl + shift + f</p></li><li><p>选中数行，整体往后移动：tab</p></li><li><p>选中数行，整体往前移动：shift + tab</p></li><li><p>在当前类中，显示类结构，并支持搜索指定的方法、属性等：ctrl + o</p></li><li><p>批量修改指定的变量名、方法名、类名等：alt + shift + r</p></li><li><p>选中的结构的大小写的切换：变成大写： ctrl + shift + x</p></li><li><p>选中的结构的大小写的切换：变成小写：ctrl + shift + y</p></li><li><p>调出生成getter&#x2F;setter&#x2F;构造器等结构： alt + shift + s</p></li><li><p>显示当前选择资源(工程 or 文件)的属性：alt + enter</p></li><li><p>快速查找：参照选中的Word快速定位到下一个 ：ctrl + k</p></li><li><p>关闭当前窗口：ctrl + w</p></li><li><p>关闭所有的窗口：ctrl + shift + w</p></li><li><p>查看指定的结构使用过的地方：ctrl + alt + g</p></li><li><p>查找与替换：ctrl + f</p></li><li><p>最大化当前的View：ctrl + m</p></li><li><p>直接定位到当前行的首位：home</p></li><li><p>直接定位到当前行的末位：end</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Eclipse中的快捷键：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;补全代码的声明：alt + &amp;#x2F;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;快速修复: ctrl + 1  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;批量导包：ctrl + shift + o&lt;/p&gt;
&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://stardust-sudo.github.io/2022/04/05/3e8297d6e1a6/"/>
    <id>https://stardust-sudo.github.io/2022/04/05/3e8297d6e1a6/</id>
    <published>2022-04-05T07:09:55.000Z</published>
    <updated>2022-04-14T05:26:18.705Z</updated>
    
    <content type="html"><![CDATA[<p>开启这个个人博客的原因：</p><ul><li>平时学习笔记都放在本地，电脑不在身边，查找起来不方便，放在博客上，使用任何联网终端都可以访问</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开启这个个人博客的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平时学习笔记都放在本地，电脑不在身边，查找起来不方便，放在博客上，使用任何联网终端都可以访问&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
